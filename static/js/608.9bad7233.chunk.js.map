{"version":3,"file":"static/js/608.9bad7233.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Profile/Profile.module.scss?4008","webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileInfo.module.scss?e49f","components/Profile/ProfileInfo/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/common/UploadPhoto/UploadPhoto.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/Myposts/MyPosts.module.scss?f352","webpack://samurai-way/./src/components/Profile/Myposts/Posts/Post.module.scss?d046","components/Profile/Myposts/Posts/Post.tsx","components/Profile/Myposts/MyPosts.tsx","components/Profile/Myposts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"profileContainer\":\"Profile_profileContainer__GK-ND\"};","// extracted by mini-css-extract-plugin\nexport default {\"profileInfoContainer\":\"ProfileInfo_profileInfoContainer__9v5Ik\",\"profileInfoBlock\":\"ProfileInfo_profileInfoBlock__goYeC\",\"mainAva\":\"ProfileInfo_mainAva__1uJJU\",\"uploadPhotoBlock\":\"ProfileInfo_uploadPhotoBlock__usFJj\",\"supportText\":\"ProfileInfo_supportText__YZUeA\",\"uploadPhoto\":\"ProfileInfo_uploadPhoto__1VHeP\",\"inputUploadPhoto\":\"ProfileInfo_inputUploadPhoto__UajYh\",\"profileStatus\":\"ProfileInfo_profileStatus__jnFRU\",\"profileDataForm\":\"ProfileInfo_profileDataForm__O8l5p\"};","import React from 'react';\r\n\r\ntype ProfileStatusType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nclass ProfileStatus extends React.Component<ProfileStatusType> {\r\n\r\n    state = {\r\n        editMode: false,\r\n        status: this.props.status\r\n    }\r\n\r\n    activateEditeMode = () => {\r\n        this.setState({\r\n            editMode: true\r\n        })\r\n    }\r\n\r\n    deactivateEditeMode = () => {\r\n        this.setState({\r\n            editMode: false\r\n        })\r\n        this.props.updateStatus(this.state.status)\r\n    }\r\n\r\n    onStatusChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({\r\n            status: e.currentTarget.value\r\n        })\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<ProfileStatusType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        if ( prevProps.status !== this.props.status ) {  this.setState({ status: this.props.status })  }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {!this.state.editMode &&\r\n                    <div>\r\n                        <span\r\n                            onDoubleClick={this.activateEditeMode}>{this.props.status ? this.props.status : \"изменить статус\"}</span>\r\n                    </div>\r\n                }\r\n                {this.state.editMode &&\r\n                    <div>\r\n                        <input onChange={this.onStatusChange} value={this.state.status}\r\n                               onBlur={this.deactivateEditeMode} autoFocus></input>\r\n                    </div>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ProfileStatus;","import React, {FC} from 'react';\r\nimport {createField, Input} from \"../../common/FormsControl/FormsControl\";\r\n\r\ntype ProfileDataFormPropsType = {\r\n    // profile: ProfileType\r\n    profile: any\r\n}\r\n\r\nexport const ProfileDataForm: FC<ProfileDataFormPropsType> = ({profile}) => {\r\n    return (\r\n        <form>\r\n            <div>\r\n                <b>Full Name</b>: {createField(\"Full name\", \"fullname\", [], Input)}\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job</b>: {profile!.lookingForAJob ? \"yes\" : \"no\"}\r\n            </div>\r\n            {profile!.lookingForAJob &&\r\n                <div>\r\n                    <b>My professional skills</b>: {profile!.lookingForAJobDescription}\r\n                </div>\r\n            }\r\n            <div>\r\n                <b>About me</b>: {profile!.aboutMe}\r\n            </div>\r\n            <div>\r\n                {/*<b>Contacts</b>: {Object.keys(profile!.contacts).map((key) => {*/}\r\n                {/*return <Contact key={key} contactTitle={key} contactValue={profile!.contacts[key]} />*/}\r\n                {/*})}*/}\r\n            </div>\r\n            <button onClick={()=>{}}>save</button>\r\n        </form>\r\n    );\r\n};\r\n","import React, {useEffect, useState} from 'react';\r\nimport ImgCrop from 'antd-img-crop';\r\nimport { Upload } from 'antd';\r\nimport 'antd/dist/antd.css';\r\nimport s from \"../../Profile/ProfileInfo/ProfileInfo.module.scss\";\r\nimport uploadPhotoPNG from \"../../../assets/png/uploadPhoto.png\";\r\nimport {savePhoto} from \"../../../redux/profile-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\n\r\n// const getSrcFromFile = (file) => {\r\n//     return new Promise((resolve) => {\r\n//         const reader = new FileReader();\r\n//         reader.readAsDataURL(file.originFileObj);\r\n//         reader.onload = () => resolve(reader.result);\r\n//     });\r\n// };\r\n\r\n\r\nexport const UploadPhoto = () => {\r\n    // const dispatch = useDispatch()\r\n    // const [fileList, setFileList] = useState([\r\n    //     {\r\n    //         uid: '-1',\r\n    //         url: 'https://zos.alipayobjects.com/rmsportal/jkjgkEfvpUPVyRjUImniVslZfWPnJuuZ.png',\r\n    //     },\r\n    // ]);\r\n    //\r\n    // const onChange = ({ fileList: newFileList }) => {\r\n    //     setFileList(newFileList);\r\n    //     console.log(fileList)\r\n    // };\r\n    //\r\n    // const onPreview = async (file) => {\r\n    //     const src = file.url || (await getSrcFromFile(file));\r\n    //     const imgWindow = window.open(src);\r\n    //\r\n    //     if (imgWindow) {\r\n    //         const image = new Image();\r\n    //         image.src = src;\r\n    //         imgWindow.document.write(image.outerHTML);\r\n    //         if (image) {\r\n    //         }\r\n    //     } else {\r\n    //         window.location.href = src;\r\n    //     }\r\n    // };\r\n\r\n    // useEffect(()=>{\r\n    //     dispatch(savePhoto(fileList.url))\r\n    // }, [fileList, setFileList])\r\n\r\n\r\n    // const dispatch = useDispatch()\r\n    // useEffect(()=>{\r\n    //\r\n    // }, [])\r\n\r\n    const mainPhotoSelectedHandler = (e: any) => {\r\n        if (e.target.files![0]) {\r\n            savePhoto(e.target.files![0])\r\n        }\r\n    }\r\n    return (\r\n        <ImgCrop>\r\n            <Upload onChange={mainPhotoSelectedHandler}>+ Add image</Upload>\r\n        </ImgCrop>\r\n        // <ImgCrop grid rotate>\r\n        //     <Upload\r\n        //         action=\"https://www.mocky.io/v2/5cc8019d300000980a055e76\"\r\n        //         listType=\"picture-card\"\r\n        //         fileList={fileList}\r\n        //         onChange={onChange}\r\n        //         onPreview={onPreview}\r\n        //     >\r\n        //         <div className={s.uploadPhotoBlock}>\r\n        //             <div className={s.supportText}>Click to upload photo</div>\r\n        //             <img src={uploadPhotoPNG} alt=\"uploadPhoto\" className={s.uploadPhoto}/>\r\n        //         </div>\r\n        //     </Upload>\r\n        // </ImgCrop>\r\n    );\r\n};\r\n","import React, {FC, useState} from \"react\";\r\nimport s from \"./ProfileInfo.module.scss\";\r\nimport {ProfileType} from \"../../../redux/profile-reducer\";\r\nimport ProfileStatus from './ProfileStatus'\r\nimport userPhoto from '../../../assets/images/user.png'\r\nimport {ProfileDataForm} from \"./ProfileDataForm\";\r\nimport uploadPhotoPNG from '../../../assets/png/uploadPhoto.png'\r\nimport {UploadPhoto} from \"../../common/UploadPhoto/UploadPhoto\";\r\n\r\n\r\ntype ProfileInfoType = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: any\r\n}\r\n\r\nexport const ProfileInfo: React.FC<ProfileInfoType> = ({profile, isOwner, savePhoto, ...props}) => {\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n\r\n    const mainPhotoSelectedHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files![0]) {\r\n            savePhoto(e.target.files![0])\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={s.profileInfoContainer}>\r\n            <div className={s.profileInfoBlock}>\r\n                <UploadPhoto/>\r\n                <img src={profile?.photos.large || userPhoto} className={s.mainAva}/>\r\n                {isOwner &&\r\n                    <label htmlFor={\"inputTag\"}>\r\n                        <div className={s.uploadPhotoBlock}>\r\n                            <div className={s.supportText}>Click to upload photo</div>\r\n                            <img src={uploadPhotoPNG} alt=\"uploadPhoto\" className={s.uploadPhoto}/>\r\n                        </div>\r\n                        <input id={\"inputTag\"} type=\"file\" onChange={mainPhotoSelectedHandler}\r\n                               className={s.inputUploadPhoto}/>\r\n                    </label>}\r\n\r\n                <div className={s.profileStatus}>\r\n                    <div>Status:</div>\r\n                    <ProfileStatus status={props.status} updateStatus={props.updateStatus}/>\r\n                </div>\r\n\r\n                {editMode\r\n                    ? <div className={s.profileDataForm}>\r\n                        <ProfileDataForm profile={profile}/>\r\n                    </div>\r\n                    : <div className={s.profileDataForm}>\r\n                        <ProfileData goToEditMode={() => setEditMode(true)} profile={profile} isOwner={isOwner}/>\r\n                    </div>\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype ProfileBlockPropsType = {\r\n    profile: ProfileType\r\n    isOwner?: boolean\r\n    goToEditMode?: () => void\r\n}\r\n\r\nconst ProfileData: FC<ProfileBlockPropsType> = ({profile, isOwner, goToEditMode}) => {\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <b>Full Name</b>: {profile!.fullName}\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job</b>: {profile!.lookingForAJob ? \"yes\" : \"no\"}\r\n            </div>\r\n            {profile!.lookingForAJob &&\r\n                <div>\r\n                    <b>My professional skills</b>: {profile!.lookingForAJobDescription}\r\n                </div>\r\n            }\r\n            <div>\r\n                <b>About me</b>: {profile!.aboutMe}\r\n            </div>\r\n            <div>\r\n                {/*<b>Contacts</b>: {Object.keys(profile!.contacts).map((key) => {*/}\r\n                {/*return <Contact key={key} contactTitle={key} contactValue={profile!.contacts[key]} />*/}\r\n                {/*})}*/}\r\n            </div>\r\n            {isOwner && <button onClick={goToEditMode} className={s.buttonEditProfile}>edit</button>}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Contact = (contactTitle: string, contactValue: string) => {\r\n    return <div><b>{contactTitle}</b>: {contactValue}</div>\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"myPostContainer\":\"MyPosts_myPostContainer__3vuVZ\",\"addForm\":\"MyPosts_addForm__CwT0C\",\"formContainer\":\"MyPosts_formContainer__Vqz3M\",\"textArea\":\"MyPosts_textArea__M7vK7\",\"addPostButton\":\"MyPosts_addPostButton__Lcz4a\",\"item\":\"MyPosts_item__ydHH-\"};","// extracted by mini-css-extract-plugin\nexport default {\"postContainer\":\"Post_postContainer__jxQ-s\",\"avaBlock\":\"Post_avaBlock__8rQEc\",\"ava\":\"Post_ava__wjWVP\",\"textBlock\":\"Post_textBlock__UkJVG\",\"like\":\"Post_like__wVdVD\"};","import React from \"react\";\r\nimport s from \"./Post.module.scss\";\r\nimport likePNG from '../../../../assets/png/like.png'\r\n\r\ntype DataTypeProps = {\r\n    post: string,\r\n    img: string,\r\n    buttonName: string\r\n    likesCount: number\r\n}\r\n\r\nexport const Post: React.FC<DataTypeProps> = (props) => {\r\n\r\n\r\n    return (\r\n        <div className={s.postContainer}>\r\n            <div className={s.avaBlock}><img src={props.img} alt=\"avatar\" className={s.ava}/></div>\r\n            <div className={s.textBlock}>{props.post}</div>\r\n            <img src={likePNG} alt=\"likePNG\" className={s.like}/> {props.likesCount}\r\n        </div>\r\n );\r\n}\r\n\r\n\r\n","import React from \"react\";\r\nimport s from \"./MyPosts.module.scss\";\r\nimport {Post} from \"./Posts/Post\";\r\nimport {profilePagePropsType} from \"../../../redux/profile-reducer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {AddMessageFormType} from \"../../Dialogs/Dialogs\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {TextArea} from \"../../common/FormsControl/FormsControl\";\r\n\r\n\r\ntype MyPostPropType = {\r\n    state: profilePagePropsType\r\n    addPost: (values: string) => void\r\n}\r\n\r\nexport const MyPosts: React.FC<MyPostPropType> = React.memo((props) => {\r\n\r\n    let postsElements = props.state.postData.map(p => <div key={p.id}><Post img={p.avatar}\r\n                                                                            post={p.message}\r\n                                                                            likesCount={p.likesCount}\r\n                                                                            buttonName={\"Like\"}/>\r\n    </div>)\r\n\r\n    const addPost = (values: AddMessageFormType) => {\r\n        props.addPost(values.newMessageBody)\r\n    }\r\n\r\n    return (\r\n        <div className={s.myPostContainer}>\r\n            <div className={s.addForm}>\r\n                <AddNewPostFormRedux onSubmit={addPost}/>\r\n            </div>\r\n            <div className={s.item}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\ntype AddNewPostFormType = {\r\n    newMessageBody: string\r\n}\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\nconst AddNewPostForm: React.FC<InjectedFormProps<AddNewPostFormType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit} className={s.formContainer}>\r\n            <Field component={TextArea} name={\"newMessageBody\"} placeholder={\"Enter your message\"}\r\n                   className={s.textArea} validate={[required, maxLength10]}/>\r\n            <button className={s.addPostButton}>AddPost</button>\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\nconst AddNewPostFormRedux = reduxForm<AddNewPostFormType>({form: \"profileAddMessageForm\"})(AddNewPostForm)\r\n\r\n","import React from \"react\";\r\nimport {MyPosts} from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {addPostAC, profilePagePropsType} from \"../../../redux/profile-reducer\";\r\n\r\ntype MapStatePropsType = {\r\n    state: profilePagePropsType\r\n}\r\ntype MapDispatchPropType = {\r\n    addPost: (newMessageBody: string) => void\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType=> {\r\n    return {\r\n        state: state.profile\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropType => {\r\n\r\n    return {\r\n        addPost: (newPostText: string) => {\r\n            dispatch(addPostAC(newPostText))\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\n","import React from \"react\";\r\nimport s from \"./Profile.module.scss\";\r\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\nimport {MyPostsContainer} from \"./Myposts/MyPostsContainer\";\r\nimport {ProfileType} from \"../../redux/profile-reducer\";\r\nimport {MoonLoader} from \"react-spinners\";\r\n\r\ntype ProfileTypeProps = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: any\r\n}\r\n\r\nexport const Profile: React.FC<ProfileTypeProps> = (props) => {\r\n    if (!props.profile) {\r\n        return <MoonLoader color={\"#b70000\"} size={50}/>\r\n    }\r\n    return (\r\n        <div className={s.profileContainer}>\r\n                <ProfileInfo\r\n                    profile={props.profile}\r\n                    status={props.status}\r\n                    updateStatus={props.updateStatus}\r\n                    isOwner={props.isOwner}\r\n                    savePhoto={props.savePhoto}\r\n                />\r\n                <MyPostsContainer/>\r\n        </div>);\r\n}\r\n\r\n","import React from \"react\";\r\nimport {Profile} from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {getStatus, ProfileType, savePhoto, setUserProfileThunk, updateStatus} from \"../../redux/profile-reducer\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\ntype PathParamType = {\r\n    userId: string\r\n}\r\n\r\ntype MapStatePropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    authorizedUserId: string\r\n    isAuth: boolean\r\n\r\n}\r\ntype MapDispatchPropType = {\r\n    setUserProfileThunk: (userId: string) => void\r\n    getStatus: (userId: string) => void\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (file: any) => void\r\n}\r\n\r\ntype ProfileContainerPropsType = RouteComponentProps<PathParamType> &  MapStatePropsType & MapDispatchPropType\r\n\r\nclass ProfileContainer extends React.Component<ProfileContainerPropsType> {\r\n\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId\r\n        if(!userId) {\r\n            // userId = \"25415\"\r\n            userId = this.props.authorizedUserId\r\n            if(!userId) {\r\n                this.props.history.push(\"/login\")\r\n            }\r\n        } // 25415\r\n        this.props.setUserProfileThunk(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<ProfileContainerPropsType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        if(this.props.match.params.userId !== prevProps.match.params.userId )\r\n            this.refreshProfile()\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <Profile\r\n                profile={this.props.profile}\r\n                status={this.props.status}\r\n                updateStatus={this.props.updateStatus}\r\n                isOwner={!this.props.match.params.userId}\r\n                savePhoto={this.props.savePhoto}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        profile: state.profile.profile,\r\n        status: state.profile.status,\r\n        authorizedUserId: state.auth.id,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {setUserProfileThunk, getStatus, updateStatus, savePhoto}),\r\n    withRouter,\r\n    // withAuthRedirect\r\n)(ProfileContainer)\r\n"],"names":["ProfileStatus","state","editMode","status","props","activateEditeMode","setState","deactivateEditeMode","updateStatus","onStatusChange","e","currentTarget","value","prevProps","prevState","snapshot","this","onDoubleClick","onChange","onBlur","autoFocus","React","ProfileDataForm","profile","createField","Input","lookingForAJob","lookingForAJobDescription","aboutMe","onClick","UploadPhoto","target","files","savePhoto","ProfileInfo","isOwner","useState","setEditMode","className","s","src","photos","large","userPhoto","htmlFor","uploadPhotoPNG","alt","id","type","ProfileData","goToEditMode","fullName","Post","img","post","likePNG","likesCount","MyPosts","postsElements","postData","map","p","avatar","message","buttonName","AddNewPostFormRedux","onSubmit","values","addPost","newMessageBody","maxLength10","maxLengthCreator","reduxForm","form","handleSubmit","Field","component","TextArea","name","placeholder","validate","required","MyPostsContainer","connect","dispatch","newPostText","addPostAC","Profile","MoonLoader","color","size","ProfileContainer","userId","match","params","authorizedUserId","history","push","setUserProfileThunk","getStatus","refreshProfile","compose","auth","isAuth","withRouter"],"sourceRoot":""}