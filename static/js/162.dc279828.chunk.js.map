{"version":3,"file":"static/js/162.dc279828.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Profile/Profile.module.css?b512","webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/Myposts/MyPosts.module.css?c27f","webpack://samurai-way/./src/components/Profile/Myposts/Posts/Post.module.css?4e20","components/Profile/Myposts/Posts/Post.tsx","components/Profile/Myposts/MyPosts.tsx","components/Profile/Myposts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","hoc/withAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"profile\":\"Profile_profile__MpyjA\"};","// extracted by mini-css-extract-plugin\nexport default {\"main\":\"ProfileInfo_main__xzfxj\"};","import React from 'react';\r\n\r\ntype ProfileStatusType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nclass ProfileStatus extends React.Component<ProfileStatusType> {\r\n\r\n    state = {\r\n        editMode: false,\r\n        status: this.props.status\r\n    }\r\n\r\n    activateEditeMode = () => {\r\n        this.setState({\r\n            editMode: true\r\n        })\r\n    }\r\n\r\n    deactivateEditeMode = () => {\r\n        this.setState({\r\n            editMode: false\r\n        })\r\n        this.props.updateStatus(this.state.status)\r\n    }\r\n\r\n    onStatusChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({\r\n            status: e.currentTarget.value\r\n        })\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<ProfileStatusType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        if ( prevProps.status !== this.props.status ) {  this.setState({ status: this.props.status })  }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {!this.state.editMode &&\r\n                    <div>\r\n                        <span\r\n                            onDoubleClick={this.activateEditeMode}>{this.props.status ? this.props.status : \"изменить статус\"}</span>\r\n                    </div>\r\n                }\r\n                {this.state.editMode &&\r\n                    <div>\r\n                        <input onChange={this.onStatusChange} value={this.state.status}\r\n                               onBlur={this.deactivateEditeMode} autoFocus></input>\r\n                    </div>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ProfileStatus;","import React from \"react\";\r\nimport s from \"./ProfileInfo.module.css\";\r\nimport {ProfileType} from \"../../../redux/profile-reducer\";\r\nimport ProfileStatus from './ProfileStatus'\r\n\r\n\r\ntype ProfileInfoType = {\r\n    img: string\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nexport const ProfileInfo: React.FC<ProfileInfoType> = (props) => {\r\n    return (\r\n        <>\r\n            <div className={s.main}>\r\n                <img src={props.img}/>\r\n            </div>\r\n            <div>\r\n                {/*<img src={props.profile.photos.large}/>*/}\r\n                {props.profile && <img src={props.profile.photos.small}/>}\r\n                <ProfileStatus status={props.status} updateStatus={props.updateStatus}/>\r\n            </div>\r\n        </>\r\n    )\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"MyPosts_item__1ydKA\",\"block\":\"MyPosts_block__7x2It\",\"textArea\":\"MyPosts_textArea__cVUs8\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__yKcCk\"};","import React from \"react\";\r\nimport s from \"./Post.module.css\";\r\n\r\n\r\ntype DataTypeProps = {\r\n    post: string,\r\n    img: string,\r\n    buttonName: string\r\n    likesCount: number\r\n}\r\n\r\nexport const Post: React.FC<DataTypeProps> = (props) => {\r\n\r\n\r\n    return (\r\n        <span>\r\n        <div className={s.item}>\r\n            <span><img src={props.img} alt=\"\"/></span>\r\n            <div>{props.post}</div>\r\n            <button>{props.buttonName} {props.likesCount}</button>\r\n        </div>\r\n    </span>);\r\n}\r\n\r\n\r\n","import React from \"react\";\r\nimport s from \"./MyPosts.module.css\";\r\nimport {Post} from \"./Posts/Post\";\r\nimport {profilePagePropsType} from \"../../../redux/profile-reducer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {AddMessageFormType} from \"../../Dialogs/Dialogs\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {TextArea} from \"../../common/FormsControl/FormsControl\";\r\n\r\n\r\n\r\ntype MyPostPropType = {\r\n    state: profilePagePropsType\r\n    addPost: (values: string) => void\r\n}\r\n\r\nexport const MyPosts: React.FC<MyPostPropType> = React.memo ((props) => {\r\n    let postsElements = props.state.postData.map(p => <div key={p.id}><Post img={p.avatar}\r\n                                                                            post={p.message}\r\n                                                                            likesCount={p.likesCount}\r\n                                                                            buttonName={\"Like\"}/>\r\n    </div>)\r\n\r\n    const addPost = (values: AddMessageFormType) => {\r\n        props.addPost(values.newMessageBody)\r\n    }\r\n\r\n    return <div>\r\n        <AddNewPostFormRedux onSubmit={addPost}/>\r\n        <div className={s.item}>\r\n            {postsElements}\r\n        </div>\r\n    </div>\r\n\r\n})\r\n\r\ntype AddNewPostFormType = {\r\n    newMessageBody: string\r\n}\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\nconst AddNewPostForm: React.FC<InjectedFormProps<AddNewPostFormType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field component={TextArea} name={\"newMessageBody\"} placeholder={\"Enter your message\"}\r\n                   className={s.textArea} validate={[required, maxLength10]}/>\r\n            <button>AddPost</button>\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\nconst AddNewPostFormRedux = reduxForm<AddNewPostFormType>({form: \"profileAddMessageForm\"})(AddNewPostForm)\r\n\r\n","import React from \"react\";\r\nimport {MyPosts} from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {addPostAC, profilePagePropsType} from \"../../../redux/profile-reducer\";\r\n\r\ntype MapStatePropsType = {\r\n    state: profilePagePropsType\r\n}\r\ntype MapDispatchPropType = {\r\n    addPost: (newMessageBody: string) => void\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType=> {\r\n    return {\r\n        state: state.profile\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropType => {\r\n\r\n    return {\r\n        addPost: (newPostText: string) => {\r\n            dispatch(addPostAC(newPostText))\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\n","import React from \"react\";\r\nimport s from \"./Profile.module.css\";\r\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\nimport {MyPostsContainer} from \"./Myposts/MyPostsContainer\";\r\nimport {ProfileType} from \"../../redux/profile-reducer\";\r\nimport {MoonLoader} from \"react-spinners\";\r\n\r\ntype ProfileTypeProps = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nexport const Profile: React.FC<ProfileTypeProps> = (props) => {\r\n    if(!props.profile){\r\n        return <MoonLoader color={\"#b70000\"} size={50}/>\r\n    }\r\n    return (<div className={s.profile}>\r\n        <ProfileInfo\r\n            img={\"https://www.eurohandball.com/media/f0rhclep/microsoftteams-image-267.png?center=0.40662327708788731,0.27796471311115661&mode=crop&width=1980&height=768&rnd=132863759739570000\"}\r\n            profile={props.profile}\r\n            status={props.status}\r\n            updateStatus={props.updateStatus}\r\n        />\r\n        <MyPostsContainer/>\r\n    </div>);\r\n}\r\n\r\n","import React from \"react\";\r\nimport {Profile} from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {getStatus, ProfileType, setUserProfileThunk, updateStatus} from \"../../redux/profile-reducer\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\ntype PathParamType = {\r\n    userId: string\r\n}\r\n\r\ntype MapStatePropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    authorizedUserId: string\r\n    isAuth: boolean\r\n\r\n}\r\ntype MapDispatchPropType = {\r\n    setUserProfileThunk: (userId: string) => void\r\n    getStatus: (userId: string) => void\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\ntype ProfileContainerPropsType = RouteComponentProps<PathParamType> &  MapStatePropsType & MapDispatchPropType\r\n\r\nclass ProfileContainer extends React.Component<ProfileContainerPropsType> {\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId\r\n        if(!userId) {\r\n            // userId = \"25415\"\r\n            userId = this.props.authorizedUserId\r\n            if(!userId) {\r\n                this.props.history.push(\"/login\")\r\n            }\r\n        } // 25415\r\n        this.props.setUserProfileThunk(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <Profile profile={this.props.profile} status={this.props.status} updateStatus={this.props.updateStatus}/>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        profile: state.profile.profile,\r\n        status: state.profile.status,\r\n        authorizedUserId: state.auth.id,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {setUserProfileThunk, getStatus, updateStatus}),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer)\r\n","import React, {ComponentType} from 'react';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\nimport {getAuthUserData, logout} from \"../redux/auth-reducer\";\r\n\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n    const RedirectComponent = (props: MapStatePropsType) => {\r\n        let {isAuth, ...restProps} = props;\r\n        if (!isAuth) return <Redirect to={\"/login\"}/>\r\n        return <Component {...restProps as T}/>\r\n    };\r\n\r\n\r\n    return connect(mapStateToPropsForRedirect, {getAuthUserData, logout})(RedirectComponent);\r\n}\r\n\r\n"],"names":["ProfileStatus","state","editMode","status","props","activateEditeMode","setState","deactivateEditeMode","updateStatus","onStatusChange","e","currentTarget","value","prevProps","prevState","snapshot","this","onDoubleClick","onChange","onBlur","autoFocus","React","ProfileInfo","className","s","src","img","profile","photos","small","Post","alt","post","buttonName","likesCount","MyPosts","postsElements","postData","map","p","avatar","message","id","AddNewPostFormRedux","onSubmit","values","addPost","newMessageBody","maxLength10","maxLengthCreator","reduxForm","form","handleSubmit","Field","component","TextArea","name","placeholder","validate","required","MyPostsContainer","connect","dispatch","newPostText","addPostAC","Profile","MoonLoader","color","size","ProfileContainer","userId","match","params","authorizedUserId","history","push","setUserProfileThunk","getStatus","compose","auth","isAuth","withRouter","withAuthRedirect","mapStateToPropsForRedirect","Component","getAuthUserData","logout","restProps","to"],"sourceRoot":""}