{"version":3,"file":"static/js/587.1cd6449d.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.scss?d037","webpack://samurai-way/./src/components/Dialogs/DialogsComponents/Message/Message.module.scss?8212","components/Dialogs/DialogsComponents/Message/Message.tsx","webpack://samurai-way/./src/components/Dialogs/DialogsComponents/FriendsList/FriendsList.module.scss?e3e2","components/Dialogs/DialogsComponents/FriendsList/FriendsList.tsx","components/Dialogs/DialogsContainer.tsx","components/Dialogs/Dialogs.tsx","webpack://samurai-way/./src/components/common/AddMessageForm/AddMessageForm.module.scss?998b","webpack://samurai-way/./src/components/common/BigButton/BigButton.module.scss?56ba","components/common/BigButton/BigButton.tsx","components/common/AddMessageForm/AddMessageForm.tsx","hoc/withAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogsContainer\":\"Dialogs_dialogsContainer__utsXu\",\"friendsList\":\"Dialogs_friendsList__-PNM8\",\"title\":\"Dialogs_title__NhgXm\",\"messages\":\"Dialogs_messages__UmrN6\"};","// extracted by mini-css-extract-plugin\nexport default {\"messageContainer\":\"Message_messageContainer__RgjE-\",\"myMessageBlock\":\"Message_myMessageBlock__F329T\",\"myMessage\":\"Message_myMessage__4rjng\",\"data\":\"Message_data__vD1dv\",\"delete\":\"Message_delete__pOkaF\",\"friendsMessageBlock\":\"Message_friendsMessageBlock__NaEXT\",\"friendsMessage\":\"Message_friendsMessage__if86N\"};","import React from \"react\";\r\nimport s from \"./Message.module.scss\"\r\nimport {Message} from \"../../../../redux/dialogs-reducer\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport {MdDeleteForever} from \"react-icons/md\";\r\n\r\n\r\ntype MessageProps = {\r\n    messages: Array<Message>\r\n    deleteMessage: (friendsId: string, messageId: string) => void\r\n}\r\n\r\nexport const Messages: React.FC<MessageProps> = (props) => {\r\n    let {userId} = useParams<{ userId: string }>()\r\n\r\n    const deleteMessage = (friendsId: string, messageId: string) => {\r\n        props.deleteMessage(friendsId, messageId)\r\n    }\r\n\r\n    return (\r\n        <div className={s.messageContainer}>\r\n            {props.messages.map((m) => m.myPost\r\n                ? <div className={s.myMessageBlock} key={m.idMessage} >\r\n                    <div className={s.myMessage}\r\n                         // onMouseEnter={() => setVisible(true)} onMouseLeave={() => setVisible(false)}\r\n                    >\r\n                        <div>{m.message}</div>\r\n                        <div className={s.data}>{m.dataMessage}</div>\r\n                    </div>\r\n                    <div className={s.delete} onClick={() => deleteMessage(userId, m.idMessage)}>\r\n                        <MdDeleteForever style={{fontSize: \"20px\"}}/>\r\n                    </div>\r\n                </div>\r\n                : <div className={s.friendsMessageBlock} key={m.idMessage}>\r\n                    <div className={s.friendsMessage}>\r\n                        <div>{m.message}</div>\r\n                        <div className={s.data}>{m.dataMessage}</div>\r\n                    </div>\r\n                </div>\r\n            ).reverse()}\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"friendBlock\":\"FriendsList_friendBlock__VubZB\",\"friend\":\"FriendsList_friend__H1RoS\",\"ava\":\"FriendsList_ava__qeGjP\",\"nameTd\":\"FriendsList_nameTd__POguG\"};","import React from \"react\";\r\nimport s from \"./FriendsList.module.scss\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype FriendsListProps = {\r\n    name: string\r\n    id: string\r\n    ava: string\r\n}\r\n\r\nexport const FriendsList: React.FC<FriendsListProps> = (props) => {\r\n    return (\r\n        <div className={s.friendBlock}>\r\n                <NavLink to={\"/dialogs/\" + props.id} className={s.friend}>\r\n                    <img src={props.ava} className={s.ava} alt=\"\"/>\r\n                    <div className={s.nameTd}>{props.name}</div>\r\n                </NavLink>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {deleteMessage, InitialStateType, sendMessageCreator} from \"../../redux/dialogs-reducer\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {Dialogs} from \"./Dialogs\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\n\r\n\r\ntype MapStatePropsType = {\r\n    dialogs: InitialStateType\r\n    // isAuth: boolean\r\n}\r\ntype MapDispatchPropType = {\r\n    SendMessage: (newMessageBody: string, userId: string) => void\r\n    DeleteMessage: (friendsId: string, messageId: string) => void\r\n}\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        dialogs: state.dialogs,\r\n        // isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropType => {\r\n    return {\r\n        SendMessage: (newMessageBody: string, userId: string) => {\r\n            dispatch(sendMessageCreator(newMessageBody, userId))\r\n        },\r\n        DeleteMessage: (friendsId: string, messageId: string) => {\r\n            dispatch(deleteMessage(friendsId, messageId))\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    withAuthRedirect,\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n)(Dialogs)\r\n\r\n","import React from 'react';\r\nimport s from './Dialogs.module.scss'\r\nimport {DialogsDataType, InitialStateType} from \"../../redux/dialogs-reducer\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport {Messages} from \"./DialogsComponents/Message/Message\";\r\nimport {FriendsList} from \"./DialogsComponents/FriendsList/FriendsList\";\r\nimport {AddMessageForm} from \"../common/AddMessageForm/AddMessageForm\";\r\n\r\nexport type DialogTypeProps = {\r\n    SendMessage: (values: string, userId: string) => void\r\n    DeleteMessage: (friendsId: string, messageId: string) => void\r\n    updateNewMessageBody: (body: any) => void\r\n    dialogs: InitialStateType\r\n    newMessageBody: string\r\n    isAuth: boolean\r\n}\r\n\r\n\r\nexport const Dialogs: React.FC<DialogTypeProps> = (props) => {\r\n    let {userId} = useParams<{ userId: string }>()\r\n\r\n    const addNewMessage = (values: string) => {\r\n        props.SendMessage(values, userId)\r\n    }\r\n\r\n    const deleteMessage = (friendsId: string, messageId: string) => {\r\n        props.DeleteMessage(friendsId, messageId)\r\n    }\r\n\r\n    let dialogElements = props.dialogs.map((dialog: DialogsDataType) => <div key={dialog.id}><FriendsList\r\n        name={dialog.name}\r\n        id={dialog.id}\r\n        ava={dialog.ava}/>\r\n    </div>)\r\n\r\n    let messages = props.dialogs.map((dialog: DialogsDataType, index) => dialog.id === userId\r\n        ? <div key={index}><Messages messages={dialog.messages} deleteMessage={deleteMessage}/></div>\r\n        : null\r\n    )\r\n    // if (!props.isAuth) return <Redirect to={\"/login\"}/>\r\n\r\n\r\n    return (\r\n        <div className={s.dialogsContainer}>\r\n            <div className={s.friendsList}>\r\n                <div className={s.title}>Friends list</div>\r\n                {dialogElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                    {messages}\r\n                {userId && <AddMessageForm onSubmit={addNewMessage}/>}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"addMessageFormBlock\":\"AddMessageForm_addMessageFormBlock__6flMP\",\"textField\":\"AddMessageForm_textField__D9IqF\"};","// extracted by mini-css-extract-plugin\nexport default {\"button\":\"BigButton_button__G3XYN\"};","import React, {FC} from 'react';\r\nimport s from \"./BigButton.module.scss\"\r\n\r\ntype ButtonPropsType = {\r\n    onClick: () => void\r\n}\r\n\r\nconst BigButton: FC<ButtonPropsType> = ({onClick}) => {\r\n    return (\r\n        <button className={s.button} onClick={onClick}>AddPost</button>\r\n    );\r\n};\r\n\r\nexport default BigButton;","import React, {useState} from \"react\";\r\nimport s from \"./AddMessageForm.module.scss\";\r\nimport BigButton from \"../BigButton/BigButton\";\r\n\r\n\r\nexport type AddMessageFormType = {\r\n    onSubmit: (values: string) => void\r\n}\r\n\r\n\r\nexport const AddMessageForm: React.FC<AddMessageFormType> = (props) => {\r\n    const [value, setValue] = useState(\"\")\r\n\r\n    const setValueHandler = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\r\n        setValue(e.currentTarget.value)\r\n    }\r\n\r\n    const sendMessage = () => {\r\n        if (value !== \"\") {\r\n            props.onSubmit(value)\r\n            setValue(\"\")\r\n        }\r\n    }\r\n\r\n    const onKeyDownHandler = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\r\n        if (e.key === \"Enter\") {\r\n            props.onSubmit(value)\r\n            setValue(\"\")\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={s.addMessageFormBlock}>\r\n            <textarea className={s.textField} placeholder={\"Enter your message\"} value={value}\r\n                      onChange={setValueHandler} onKeyDown={onKeyDownHandler}>\r\n            </textarea>\r\n            <BigButton onClick={sendMessage}/>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, {ComponentType} from 'react';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\nimport {getAuthUserData, logout} from \"../redux/auth-reducer\";\r\n\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n    const RedirectComponent = (props: MapStatePropsType) => {\r\n        let {isAuth, ...restProps} = props;\r\n        if (!isAuth) return <Redirect to={\"/login\"}/>\r\n        return <Component {...restProps as T}/>\r\n    };\r\n\r\n\r\n    return connect(mapStateToPropsForRedirect, {getAuthUserData, logout})(RedirectComponent);\r\n}\r\n\r\n"],"names":["Messages","props","userId","useParams","className","s","messages","map","m","myPost","message","dataMessage","onClick","friendsId","messageId","idMessage","deleteMessage","style","fontSize","reverse","FriendsList","to","id","src","ava","alt","name","compose","withAuthRedirect","connect","state","dialogs","dispatch","SendMessage","newMessageBody","sendMessageCreator","DeleteMessage","dialogElements","dialog","index","AddMessageForm","onSubmit","values","useState","value","setValue","placeholder","onChange","e","currentTarget","onKeyDown","key","mapStateToPropsForRedirect","isAuth","auth","Component","getAuthUserData","logout","restProps"],"sourceRoot":""}