{"version":3,"file":"static/js/608.64c95d9b.chunk.js","mappings":"kNACA,EAAmC,kC,oBCAnC,EAAuC,0CAAvC,EAAoG,sCAApG,EAAwJ,iCAAxJ,EAAmM,6BAAnM,EAA+b,kCAA/b,EAAif,mCAAjf,EAAsiB,qCAAtiB,EAA+lB,uC,SCMzlBA,EAAAA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GAAAA,SAAAA,IAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,KAAAA,GAAAA,IAAAA,IAAAA,EAAAA,UAAAA,OAAAA,EAAAA,IAAAA,MAAAA,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,IAAAA,EAAAA,GAAAA,UAAAA,GAwBD,OAxBCA,EAAAA,EAAAA,KAAAA,MAAAA,EAAAA,CAAAA,MAAAA,OAAAA,KAEFC,MAAQ,CACJC,UAAU,EACVC,OAAQ,EAAKC,MAAMD,QAFf,EAKRE,kBAAoB,WAChB,EAAKC,SAAS,CACVJ,UAAU,KAEjB,EAEDK,oBAAsB,WAClB,EAAKD,SAAS,CACVJ,UAAU,IAEd,EAAKE,MAAMI,aAAa,EAAKP,MAAME,SACtC,EAEDM,eAAiB,SAACC,GACd,EAAKJ,SAAS,CACVH,OAAQO,EAAEC,cAAcC,SAE/B,EAuBA,OAvBA,0CAED,SAAmBC,EAAwCC,EAAyBC,GAC3EF,EAAUV,SAAWa,KAAKZ,MAAMD,QAAYa,KAAKV,SAAS,CAAEH,OAAQa,KAAKZ,MAAMD,WACvF,oBAED,WACI,OACI,4BACMa,KAAKf,MAAMC,WACT,0BACI,iBACIe,cAAeD,KAAKX,kBADxB,SAC4CW,KAAKZ,MAAMD,OAASa,KAAKZ,MAAMD,OAAS,4FAG3Fa,KAAKf,MAAMC,WACR,0BACI,kBAAOgB,SAAUF,KAAKP,eAAgBG,MAAOI,KAAKf,MAAME,OACjDgB,OAAQH,KAAKT,oBAAqBa,WAAS,aAKrE,EA/CCpB,CAAsBqB,EAAAA,WAkD5B,I,oBCjDaC,EAAgD,SAAC,GAAe,IAAdC,EAAa,EAAbA,QAC3D,OACI,6BACI,4BACI,qCADJ,MACuBC,EAAAA,EAAAA,IAAY,YAAa,WAAY,GAAIC,EAAAA,QAEhE,4BACI,6CADJ,KAC+BF,EAASG,eAAiB,MAAQ,QAEhEH,EAASG,iBACN,4BACI,kDADJ,KACoCH,EAASI,8BAGjD,4BACI,oCADJ,KACsBJ,EAASK,YAE/B,oBAKA,mBAAQC,QAAS,aAAjB,sB,wCCXCC,EAAc,WA4CvB,OACI,SAAC,IAAD,WACI,SAAC,IAAD,CAAQZ,SAPiB,SAACR,GAC1BA,EAAEqB,OAAOC,MAAO,KAChBC,EAAAA,EAAAA,IAAUvB,EAAEqB,OAAOC,MAAO,KAK1B,UAA4C,gBAAKE,MAAO,CAACC,MAAM,QAASC,OAAQ,WAApC,8B,oCC/C3CC,EAAyC,SAAC,GAA6C,IAA5Cd,EAA2C,EAA3CA,QAASe,EAAkC,EAAlCA,QAAuBlC,GAAW,EAAzB6B,WAAyB,aAE/F,GAAgCM,EAAAA,EAAAA,WAAS,GAAzC,eAAOrC,EAAP,KAAiBsC,EAAjB,KAQA,OACI,gBAAKC,UAAWC,EAAhB,UACI,iBAAKD,UAAWC,EAAhB,WAEI,iBAAKD,UAAWC,EAAhB,WACI,SAACZ,EAAD,KACA,gBAAKa,KAAY,OAAPpB,QAAO,IAAPA,OAAA,EAAAA,EAASqB,OAAOC,QAASC,EAAWL,UAAWC,QAY7D,iBAAKD,UAAWC,EAAhB,WACI,iBAAKD,UAAWC,EAAhB,WACI,sCACA,SAAC,EAAD,CAAevC,OAAQC,EAAMD,OAAQK,aAAcJ,EAAMI,kBAG5DN,GACK,gBAAKuC,UAAWC,EAAhB,UACE,SAACpB,EAAD,CAAiBC,QAASA,OAE5B,gBAAKkB,UAAWC,EAAhB,UACE,SAACK,EAAD,CAAaC,aAAc,kBAAMR,GAAY,IAAOjB,QAASA,EAASe,QAASA,eAerGS,EAAyC,SAAC,GAAsC,IAArCxB,EAAoC,EAApCA,QAASe,EAA2B,EAA3BA,QAASU,EAAkB,EAAlBA,aAE/D,OACI,4BACI,4BACI,qCADJ,KACuBzB,EAAS0B,aAEhC,4BACI,6CADJ,KAC+B1B,EAASG,eAAiB,MAAQ,QAEhEH,EAASG,iBACN,4BACI,kDADJ,KACoCH,EAASI,8BAGjD,4BACI,oCADJ,KACsBJ,EAASK,YAE/B,mBAKCU,IAAW,mBAAQT,QAASmB,EAAcP,UAAWC,EAA1C,sBC9FxB,EAAkC,iCAAlC,EAA6E,yBAA7E,EAAsH,+BAAtH,EAAgK,0BAAhK,EAA0M,+BAA1M,EAAwP,8BAAxP,EAA6R,sBAA7R,EAAqU,iCAArU,EAAmX,4BCAnX,EAAgC,4BAAhC,EAAuE,uBAAvE,EAAoG,kBAApG,EAAkI,wBAAlI,EAAiK,mBAAjK,EAA8L,sBAA9L,EAA2N,mB,UCc9MQ,EAAgC,SAAC9C,GAG1C,OACI,iBAAKqC,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,UAA4B,gBAAKC,IAAKvC,EAAM+C,IAAKC,IAAI,SAASX,UAAWC,OACzE,iBAAKD,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,SAAyBtC,EAAMiD,QAC/B,gBAAKZ,UAAWC,EAAhB,SAA4BtC,EAAMkD,WAEtC,gBAAKX,IAAKY,EAASH,IAAI,UAAUX,UAAWC,EAAQb,QAAS,kBAAIzB,EAAMoD,QAAQpD,EAAMqD,EAAEC,OAN3F,IAMmGtD,EAAMuD,e,uCCPpGC,GAAoCvC,EAAAA,MAAW,SAACjB,GAOzD,IALA,OAAwBmC,EAAAA,EAAAA,UAAS,GAAjC,eAAOsB,EAAP,KAAaC,EAAb,KACMC,EAAa3D,EAAMH,MAAM+D,SACzBC,EAAUC,KAAKC,KAAKJ,EAAWK,OAAS,GACxCC,EAAa,GAEVC,EAAI,EAAGA,EAAIL,EAAU,EAAGK,IAC7BD,EAAWE,KAAKD,GAEpB,IAUME,EAVM,SAACX,GACT,GAAa,IAATA,EACA,OAAOE,EAAWU,MAAM,EAAG,GACxB,GAAIZ,EAAO,EAAG,CACjB,IAAMa,EAAuB,EAAPb,EAAY,EAC5Bc,EAAoB,EAAPd,EACnB,OAAOE,EAAWU,MAAMC,EAAcC,IAIzBC,CAAIf,GAErBgB,EAAgBL,EAAcM,KAAI,SAAArB,GAAC,OAAI,0BAAgB,SAACP,EAAD,CAAMC,IAAKM,EAAEsB,OACP1B,KAAMI,EAAEJ,KACRC,KAAMG,EAAEuB,QACRrB,WAAYF,EAAEE,WACdsB,WAAY,OACZzB,QAASpD,EAAMoD,QACfC,EAAGA,KANfA,EAAEC,OAUnDwB,EAAab,EAAWS,KAAI,SAACrB,EAAG0B,GAChC,IAAMC,EAAWvB,IAASJ,EAAI,CAACtB,MAAO,qBAAuB,GAC7D,OAAO,iBAAkBM,UAAWC,EAAcR,MAAOkD,EAAUvD,QAAS,kBAAMiC,EAAQL,IAAnF,SAAwFA,GAA7E0B,MAOtB,OACI,iBAAK1C,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,UACI,SAAC2C,GAAD,CAAqBC,SAPjB,SAACC,GACbnF,EAAMoF,QAAQD,EAAOE,sBAQjB,gBAAKhD,UAAWC,EAAhB,UACI,gBAAKD,UAAWC,EAAhB,SACKmC,OAGT,gBAAKpC,UAAWC,EAAhB,SACKwC,UAUXQ,IAAcC,EAAAA,EAAAA,GAAiB,IAqB/BN,IAAsBO,EAAAA,EAAAA,GAA8B,CAACC,KAAM,yBAArCD,EAlB4C,SAACxF,GACrE,IAAM0F,GAAWC,EAAAA,EAAAA,MAOjB,OACI,kBAAMT,SAAUlF,EAAM4F,aAAcvD,UAAWC,EAA/C,WACI,SAACuD,EAAA,EAAD,CAAOC,UAAWC,EAAAA,GAAU9C,KAAM,iBAAkB+C,YAAa,qBAC1D3D,UAAWC,EAAY2D,SAAU,CAACC,EAAAA,EAAUZ,IAAca,UAThD,SAAC7F,GACJ,KAAdA,EAAE8F,SACFV,GAASW,EAAAA,EAAAA,IAAU/F,EAAEC,cAAcC,YAQnC,mBAAQ6B,UAAWC,EAAnB,2B,WC9DCgE,IAAmBC,EAAAA,GAAAA,KAlBV,SAAC1G,GACnB,MAAO,CACHA,MAAOA,EAAMsB,YAII,SAACuE,GACtB,MAAO,CACHN,QAAS,SAACoB,GACNd,GAASW,EAAAA,EAAAA,IAAUG,KAEvBpD,QAAS,SAACqD,GACNf,GAAStC,EAAAA,EAAAA,IAAQqD,QAMGF,CAA6C/C,I,WCjBhEkD,GAAsC,SAAC1G,GAChD,OAAKA,EAAMmB,SAKP,iBAAKkB,UAAWC,EAAhB,WACI,SAACL,EAAD,CACId,QAASnB,EAAMmB,QACfpB,OAAQC,EAAMD,OACdK,aAAcJ,EAAMI,aACpB8B,QAASlC,EAAMkC,QACfL,UAAW7B,EAAM6B,aAErB,SAACyE,GAAD,QAXG,SAACK,GAAA,EAAD,K,sBCWTC,GAAAA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GAAAA,SAAAA,IAAAA,OAAAA,EAAAA,EAAAA,GAAAA,KAAAA,GAAAA,EAAAA,MAAAA,KAAAA,WAmCD,OAnCCA,EAAAA,EAAAA,GAAAA,EAAAA,CAAAA,CAAAA,IAAAA,iBAAAA,MAEF,WACI,IAAIC,EAASjG,KAAKZ,MAAM8G,MAAMC,OAAOF,OACjCA,IAEAA,EAASjG,KAAKZ,MAAMgH,mBAEhBpG,KAAKZ,MAAMiH,QAAQ9C,KAAK,UAGhCvD,KAAKZ,MAAMkH,oBAAoBL,GAC/BjG,KAAKZ,MAAMmH,UAAUN,KACxB,+BAED,WACIjG,KAAKwG,mBACR,gCAED,SAAmB3G,EAAgDC,EAAyBC,GACrFC,KAAKZ,MAAM8G,MAAMC,OAAOF,SAAWpG,EAAUqG,MAAMC,OAAOF,QACzDjG,KAAKwG,mBACZ,oBAED,WAEI,OACI,SAACV,GAAD,CACIvF,QAASP,KAAKZ,MAAMmB,QACpBpB,OAAQa,KAAKZ,MAAMD,OACnBK,aAAcQ,KAAKZ,MAAMI,aACzB8B,SAAUtB,KAAKZ,MAAM8G,MAAMC,OAAOF,OAClChF,UAAWjB,KAAKZ,MAAM6B,gBAGjC,EAnCC+E,CAAyB3F,EAAAA,WAoD/B,IAAeoG,EAAAA,GAAAA,KACXd,EAAAA,GAAAA,KAZkB,SAAC1G,GACnB,MAAO,CACHsB,QAAStB,EAAMsB,QAAQA,QACvBpB,OAAQF,EAAMsB,QAAQpB,OACtBiH,iBAAkBnH,EAAMyH,KAAKhE,GAC7BiE,OAAQ1H,EAAMyH,KAAKC,UAOE,CAACL,oBAAAA,EAAAA,GAAqBC,UAAAA,EAAAA,GAAW/G,aAAAA,EAAAA,GAAcyB,UAAAA,EAAAA,KACxE2F,GAAAA,GAFJ,CAIEZ,K","sources":["webpack://samurai-way/./src/components/Profile/Profile.module.scss?4008","webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileInfo.module.scss?e49f","components/Profile/ProfileInfo/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/common/UploadPhoto/UploadPhoto.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/Myposts/MyPosts.module.scss?f352","webpack://samurai-way/./src/components/Profile/Myposts/Posts/Post.module.scss?d046","components/Profile/Myposts/Posts/Post.tsx","components/Profile/Myposts/MyPosts.tsx","components/Profile/Myposts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"profileContainer\":\"Profile_profileContainer__GK-ND\"};","// extracted by mini-css-extract-plugin\nexport default {\"profileInfoContainer\":\"ProfileInfo_profileInfoContainer__9v5Ik\",\"profileInfoBlock\":\"ProfileInfo_profileInfoBlock__goYeC\",\"avatarBlock\":\"ProfileInfo_avatarBlock__21pru\",\"mainAva\":\"ProfileInfo_mainAva__1uJJU\",\"uploadPhotoBlock\":\"ProfileInfo_uploadPhotoBlock__usFJj\",\"supportText\":\"ProfileInfo_supportText__YZUeA\",\"uploadPhoto\":\"ProfileInfo_uploadPhoto__1VHeP\",\"inputUploadPhoto\":\"ProfileInfo_inputUploadPhoto__UajYh\",\"profileBlock\":\"ProfileInfo_profileBlock__5piPY\",\"profileStatus\":\"ProfileInfo_profileStatus__jnFRU\",\"profileDataForm\":\"ProfileInfo_profileDataForm__O8l5p\",\"buttonEditProfile\":\"ProfileInfo_buttonEditProfile__2LsHa\"};","import React from 'react';\r\n\r\ntype ProfileStatusType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nclass ProfileStatus extends React.Component<ProfileStatusType> {\r\n\r\n    state = {\r\n        editMode: false,\r\n        status: this.props.status\r\n    }\r\n\r\n    activateEditeMode = () => {\r\n        this.setState({\r\n            editMode: true\r\n        })\r\n    }\r\n\r\n    deactivateEditeMode = () => {\r\n        this.setState({\r\n            editMode: false\r\n        })\r\n        this.props.updateStatus(this.state.status)\r\n    }\r\n\r\n    onStatusChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({\r\n            status: e.currentTarget.value\r\n        })\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<ProfileStatusType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        if ( prevProps.status !== this.props.status ) {  this.setState({ status: this.props.status })  }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {!this.state.editMode &&\r\n                    <div>\r\n                        <span\r\n                            onDoubleClick={this.activateEditeMode}>{this.props.status ? this.props.status : \"изменить статус\"}</span>\r\n                    </div>\r\n                }\r\n                {this.state.editMode &&\r\n                    <div>\r\n                        <input onChange={this.onStatusChange} value={this.state.status}\r\n                               onBlur={this.deactivateEditeMode} autoFocus></input>\r\n                    </div>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ProfileStatus;","import React, {FC} from 'react';\r\nimport {createField, Input} from \"../../common/FormsControl/FormsControl\";\r\n\r\ntype ProfileDataFormPropsType = {\r\n    // profile: ProfileType\r\n    profile: any\r\n}\r\n\r\nexport const ProfileDataForm: FC<ProfileDataFormPropsType> = ({profile}) => {\r\n    return (\r\n        <form>\r\n            <div>\r\n                <b>Full Name</b>: {createField(\"Full name\", \"fullname\", [], Input)}\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job</b>: {profile!.lookingForAJob ? \"yes\" : \"no\"}\r\n            </div>\r\n            {profile!.lookingForAJob &&\r\n                <div>\r\n                    <b>My professional skills</b>: {profile!.lookingForAJobDescription}\r\n                </div>\r\n            }\r\n            <div>\r\n                <b>About me</b>: {profile!.aboutMe}\r\n            </div>\r\n            <div>\r\n                {/*<b>Contacts</b>: {Object.keys(profile!.contacts).map((key) => {*/}\r\n                {/*return <Contact key={key} contactTitle={key} contactValue={profile!.contacts[key]} />*/}\r\n                {/*})}*/}\r\n            </div>\r\n            <button onClick={()=>{}}>save</button>\r\n        </form>\r\n    );\r\n};\r\n","import React, {useEffect, useState} from 'react';\r\nimport ImgCrop from 'antd-img-crop';\r\nimport { Upload } from 'antd';\r\nimport 'antd/dist/antd.css';\r\nimport s from \"../../Profile/ProfileInfo/ProfileInfo.module.scss\";\r\nimport uploadPhotoPNG from \"../../../assets/png/uploadPhoto.png\";\r\nimport {savePhoto} from \"../../../redux/profile-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\n\r\n// const getSrcFromFile = (file) => {\r\n//     return new Promise((resolve) => {\r\n//         const reader = new FileReader();\r\n//         reader.readAsDataURL(file.originFileObj);\r\n//         reader.onload = () => resolve(reader.result);\r\n//     });\r\n// };\r\n\r\n\r\nexport const UploadPhoto = () => {\r\n    // const dispatch = useDispatch()\r\n    // const [fileList, setFileList] = useState([\r\n    //     {\r\n    //         uid: '-1',\r\n    //         url: 'https://zos.alipayobjects.com/rmsportal/jkjgkEfvpUPVyRjUImniVslZfWPnJuuZ.png',\r\n    //     },\r\n    // ]);\r\n    //\r\n    // const onChange = ({ fileList: newFileList }) => {\r\n    //     setFileList(newFileList);\r\n    //     console.log(fileList)\r\n    // };\r\n    //\r\n    // const onPreview = async (file) => {\r\n    //     const src = file.url || (await getSrcFromFile(file));\r\n    //     const imgWindow = window.open(src);\r\n    //\r\n    //     if (imgWindow) {\r\n    //         const image = new Image();\r\n    //         image.src = src;\r\n    //         imgWindow.document.write(image.outerHTML);\r\n    //         if (image) {\r\n    //         }\r\n    //     } else {\r\n    //         window.location.href = src;\r\n    //     }\r\n    // };\r\n\r\n    // useEffect(()=>{\r\n    //     dispatch(savePhoto(fileList.url))\r\n    // }, [fileList, setFileList])\r\n\r\n\r\n    // const dispatch = useDispatch()\r\n    // useEffect(()=>{\r\n    //\r\n    // }, [])\r\n\r\n    const mainPhotoSelectedHandler = (e: any) => {\r\n        if (e.target.files![0]) {\r\n            savePhoto(e.target.files![0])\r\n        }\r\n    }\r\n    return (\r\n        <ImgCrop>\r\n            <Upload onChange={mainPhotoSelectedHandler}><div style={{color:\"white\", cursor: \"pointer\"}}>+ Add image</div></Upload>\r\n        </ImgCrop>\r\n        // <ImgCrop grid rotate>\r\n        //     <Upload\r\n        //         action=\"https://www.mocky.io/v2/5cc8019d300000980a055e76\"\r\n        //         listType=\"picture-card\"\r\n        //         fileList={fileList}\r\n        //         onChange={onChange}\r\n        //         onPreview={onPreview}\r\n        //     >\r\n        //         <div className={s.uploadPhotoBlock}>\r\n        //             <div className={s.supportText}>Click to upload photo</div>\r\n        //             <img src={uploadPhotoPNG} alt=\"uploadPhoto\" className={s.uploadPhoto}/>\r\n        //         </div>\r\n        //     </Upload>\r\n        // </ImgCrop>\r\n    );\r\n};\r\n","import React, {FC, useState} from \"react\";\r\nimport s from \"./ProfileInfo.module.scss\";\r\nimport {ProfileType} from \"../../../redux/profile-reducer\";\r\nimport ProfileStatus from './ProfileStatus'\r\nimport userPhoto from '../../../assets/images/user.png'\r\nimport {ProfileDataForm} from \"./ProfileDataForm\";\r\nimport uploadPhotoPNG from '../../../assets/png/uploadPhoto.png'\r\nimport {UploadPhoto} from \"../../common/UploadPhoto/UploadPhoto\";\r\n\r\n\r\ntype ProfileInfoType = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: any\r\n}\r\n\r\nexport const ProfileInfo: React.FC<ProfileInfoType> = ({profile, isOwner, savePhoto, ...props}) => {\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n\r\n    const mainPhotoSelectedHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files![0]) {\r\n            savePhoto(e.target.files![0])\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={s.profileInfoContainer}>\r\n            <div className={s.profileInfoBlock}>\r\n\r\n                <div className={s.avatarBlock}>\r\n                    <UploadPhoto/>\r\n                    <img src={profile?.photos.large || userPhoto} className={s.mainAva}/>\r\n                    {/*{isOwner &&*/}\r\n                    {/*    <label htmlFor={\"inputTag\"}>*/}\r\n                    {/*        <div className={s.uploadPhotoBlock}>*/}\r\n                    {/*            <div className={s.supportText}>Click to upload photo</div>*/}\r\n                    {/*            <img src={uploadPhotoPNG} alt=\"uploadPhoto\" className={s.uploadPhoto}/>*/}\r\n                    {/*        </div>*/}\r\n                    {/*        <input id={\"inputTag\"} type=\"file\" onChange={mainPhotoSelectedHandler}*/}\r\n                    {/*               className={s.inputUploadPhoto}/>*/}\r\n                    {/*    </label>}*/}\r\n                </div>\r\n\r\n                <div className={s.profileBlock}>\r\n                    <div className={s.profileStatus}>\r\n                        <div>Status:</div>\r\n                        <ProfileStatus status={props.status} updateStatus={props.updateStatus}/>\r\n                    </div>\r\n\r\n                    {editMode\r\n                        ? <div className={s.profileDataForm}>\r\n                            <ProfileDataForm profile={profile}/>\r\n                        </div>\r\n                        : <div className={s.profileDataForm}>\r\n                            <ProfileData goToEditMode={() => setEditMode(true)} profile={profile} isOwner={isOwner}/>\r\n                        </div>\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype ProfileBlockPropsType = {\r\n    profile: ProfileType\r\n    isOwner?: boolean\r\n    goToEditMode?: () => void\r\n}\r\n\r\nconst ProfileData: FC<ProfileBlockPropsType> = ({profile, isOwner, goToEditMode}) => {\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <b>Full Name</b>: {profile!.fullName}\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job</b>: {profile!.lookingForAJob ? \"yes\" : \"no\"}\r\n            </div>\r\n            {profile!.lookingForAJob &&\r\n                <div>\r\n                    <b>My professional skills</b>: {profile!.lookingForAJobDescription}\r\n                </div>\r\n            }\r\n            <div>\r\n                <b>About me</b>: {profile!.aboutMe}\r\n            </div>\r\n            <div>\r\n                {/*<b>Contacts</b>: {Object.keys(profile!.contacts).map((key) => {*/}\r\n                {/*return <Contact key={key} contactTitle={key} contactValue={profile!.contacts[key]} />*/}\r\n                {/*})}*/}\r\n            </div>\r\n            {isOwner && <button onClick={goToEditMode} className={s.buttonEditProfile}>edit</button>}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Contact = (contactTitle: string, contactValue: string) => {\r\n    return <div><b>{contactTitle}</b>: {contactValue}</div>\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"myPostContainer\":\"MyPosts_myPostContainer__3vuVZ\",\"addForm\":\"MyPosts_addForm__CwT0C\",\"formContainer\":\"MyPosts_formContainer__Vqz3M\",\"textArea\":\"MyPosts_textArea__M7vK7\",\"addPostButton\":\"MyPosts_addPostButton__Lcz4a\",\"messageBlock\":\"MyPosts_messageBlock__4JDWJ\",\"item\":\"MyPosts_item__ydHH-\",\"paginationBlock\":\"MyPosts_paginationBlock__3AASw\",\"pagination\":\"MyPosts_pagination__NnNu+\"};","// extracted by mini-css-extract-plugin\nexport default {\"postContainer\":\"Post_postContainer__jxQ-s\",\"avaBlock\":\"Post_avaBlock__8rQEc\",\"ava\":\"Post_ava__wjWVP\",\"textBlock\":\"Post_textBlock__UkJVG\",\"name\":\"Post_name__Xr5Bj\",\"message\":\"Post_message__Qy6Nf\",\"like\":\"Post_like__wVdVD\"};","import React from \"react\";\r\nimport s from \"./Post.module.scss\";\r\nimport likePNG from '../../../../assets/png/like.png'\r\nimport {postDataPropsType} from \"../../../../redux/profile-reducer\";\r\n\r\ntype DataTypeProps = {\r\n    post: string\r\n    name: string\r\n    img: string\r\n    buttonName: string\r\n    likesCount: number\r\n    p: postDataPropsType\r\n    addLike: (idUser: string) => void\r\n}\r\n\r\nexport const Post: React.FC<DataTypeProps> = (props) => {\r\n\r\n\r\n    return (\r\n        <div className={s.postContainer}>\r\n            <div className={s.avaBlock}><img src={props.img} alt=\"avatar\" className={s.ava}/></div>\r\n            <div className={s.textBlock}>\r\n                <div className={s.name}>{props.name}</div>\r\n                <div className={s.message}>{props.post}</div>\r\n            </div>\r\n            <img src={likePNG} alt=\"likePNG\" className={s.like} onClick={()=>props.addLike(props.p.id)}/> {props.likesCount}\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n","import React, {useState} from \"react\";\r\nimport s from \"./MyPosts.module.scss\";\r\nimport {Post} from \"./Posts/Post\";\r\nimport {addPostAC, profilePagePropsType} from \"../../../redux/profile-reducer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {AddMessageFormType} from \"../../Dialogs/Dialogs\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {TextArea} from \"../../common/FormsControl/FormsControl\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {useAppDispatch} from \"../../../redux/redux-store\";\r\n\r\n\r\ntype MyPostPropType = {\r\n    state: profilePagePropsType\r\n    addPost: (values: string) => void\r\n    addLike: (idUser: string) => void\r\n}\r\n\r\nexport const MyPosts: React.FC<MyPostPropType> = React.memo((props) => {\r\n\r\n    const [page, setPage] = useState(1)\r\n    const postsArray = props.state.postData\r\n    const allPage = Math.ceil(postsArray.length / 5)\r\n    const pageVision = []\r\n\r\n    for (let i = 1; i < allPage + 1; i++) {\r\n        pageVision.push(i)\r\n    }\r\n    const foo = (page: number) => {\r\n        if (page === 1) {\r\n            return postsArray.slice(0, 5)\r\n        } else if (page > 1) {\r\n            const startMessage = (page * 5) - 5\r\n            const endMessage = page * 5\r\n            return postsArray.slice(startMessage, endMessage)\r\n        }\r\n    }\r\n\r\n    const portionArray = foo(page)\r\n\r\n    let postsElements = portionArray!.map(p => <div key={p.id}><Post img={p.avatar}\r\n                                                                     name={p.name}\r\n                                                                     post={p.message}\r\n                                                                     likesCount={p.likesCount}\r\n                                                                     buttonName={\"Like\"}\r\n                                                                     addLike={props.addLike}\r\n                                                                     p={p}\r\n    />\r\n    </div>)\r\n\r\n    let pagination = pageVision.map((p, index) => {\r\n        const isActive = page === p ? {color: \"rgb(211, 181, 91)\"} : {}\r\n        return <span key={index} className={s.pagination} style={isActive} onClick={() => setPage(p)}>{p}</span>\r\n    })\r\n\r\n    const addPost = (values: AddMessageFormType) => {\r\n        props.addPost(values.newMessageBody)\r\n    }\r\n\r\n    return (\r\n        <div className={s.myPostContainer}>\r\n            <div className={s.addForm}>\r\n                <AddNewPostFormRedux onSubmit={addPost}/>\r\n            </div>\r\n            <div className={s.messageBlock}>\r\n                <div className={s.item}>\r\n                    {postsElements}\r\n                </div>\r\n            </div>\r\n            <div className={s.paginationBlock}>\r\n                {pagination}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\ntype AddNewPostFormType = {\r\n    newMessageBody: string\r\n}\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\n\r\nconst AddNewPostForm: React.FC<InjectedFormProps<AddNewPostFormType>> = (props) => {\r\n    const dispatch = useAppDispatch()\r\n    const onKeyDownHandler = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.keyCode === 13) {\r\n            dispatch(addPostAC(e.currentTarget.value))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit} className={s.formContainer}>\r\n            <Field component={TextArea} name={\"newMessageBody\"} placeholder={\"Enter your message\"}\r\n                   className={s.textArea} validate={[required, maxLength10]} onKeyDown={onKeyDownHandler}/>\r\n            <button className={s.addPostButton}>AddPost</button>\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\nconst AddNewPostFormRedux = reduxForm<AddNewPostFormType>({form: \"profileAddMessageForm\"})(AddNewPostForm)\r\n\r\n","import React from \"react\";\r\nimport {MyPosts} from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {addLike, addPostAC, profilePagePropsType} from \"../../../redux/profile-reducer\";\r\n\r\ntype MapStatePropsType = {\r\n    state: profilePagePropsType\r\n}\r\ntype MapDispatchPropType = {\r\n    addPost: (newMessageBody: string) => void\r\n    addLike: (idUser: string) => void\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType=> {\r\n    return {\r\n        state: state.profile\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropType => {\r\n    return {\r\n        addPost: (newPostText: string) => {\r\n            dispatch(addPostAC(newPostText))\r\n        },\r\n        addLike: (idUser: string) => {\r\n            dispatch(addLike(idUser))\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\n","import React from \"react\";\r\nimport s from \"./Profile.module.scss\";\r\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\nimport {MyPostsContainer} from \"./Myposts/MyPostsContainer\";\r\nimport {ProfileType} from \"../../redux/profile-reducer\";\r\nimport {MoonLoader} from \"react-spinners\";\r\nimport {Preloader} from \"../common/Preloader/Preloader\";\r\n\r\ntype ProfileTypeProps = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: any\r\n}\r\n\r\nexport const Profile: React.FC<ProfileTypeProps> = (props) => {\r\n    if (!props.profile) {\r\n        // return <MoonLoader color={\"#b70000\"} size={50}/>\r\n        return <Preloader/>\r\n    }\r\n    return (\r\n        <div className={s.profileContainer}>\r\n            <ProfileInfo\r\n                profile={props.profile}\r\n                status={props.status}\r\n                updateStatus={props.updateStatus}\r\n                isOwner={props.isOwner}\r\n                savePhoto={props.savePhoto}\r\n            />\r\n            <MyPostsContainer/>\r\n        </div>);\r\n}\r\n\r\n","import React from \"react\";\r\nimport {Profile} from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {getStatus, ProfileType, savePhoto, setUserProfileThunk, updateStatus} from \"../../redux/profile-reducer\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\ntype PathParamType = {\r\n    userId: string\r\n}\r\n\r\ntype MapStatePropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    authorizedUserId: string\r\n    isAuth: boolean\r\n\r\n}\r\ntype MapDispatchPropType = {\r\n    setUserProfileThunk: (userId: string) => void\r\n    getStatus: (userId: string) => void\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (file: any) => void\r\n}\r\n\r\ntype ProfileContainerPropsType = RouteComponentProps<PathParamType> &  MapStatePropsType & MapDispatchPropType\r\n\r\nclass ProfileContainer extends React.Component<ProfileContainerPropsType> {\r\n\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId\r\n        if(!userId) {\r\n            // userId = \"25415\"\r\n            userId = this.props.authorizedUserId\r\n            if(!userId) {\r\n                this.props.history.push(\"/login\")\r\n            }\r\n        } // 25415\r\n        this.props.setUserProfileThunk(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<ProfileContainerPropsType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        if(this.props.match.params.userId !== prevProps.match.params.userId )\r\n            this.refreshProfile()\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <Profile\r\n                profile={this.props.profile}\r\n                status={this.props.status}\r\n                updateStatus={this.props.updateStatus}\r\n                isOwner={!this.props.match.params.userId}\r\n                savePhoto={this.props.savePhoto}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        profile: state.profile.profile,\r\n        status: state.profile.status,\r\n        authorizedUserId: state.auth.id,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {setUserProfileThunk, getStatus, updateStatus, savePhoto}),\r\n    withRouter,\r\n    // withAuthRedirect\r\n)(ProfileContainer)\r\n"],"names":["ProfileStatus","state","editMode","status","props","activateEditeMode","setState","deactivateEditeMode","updateStatus","onStatusChange","e","currentTarget","value","prevProps","prevState","snapshot","this","onDoubleClick","onChange","onBlur","autoFocus","React","ProfileDataForm","profile","createField","Input","lookingForAJob","lookingForAJobDescription","aboutMe","onClick","UploadPhoto","target","files","savePhoto","style","color","cursor","ProfileInfo","isOwner","useState","setEditMode","className","s","src","photos","large","userPhoto","ProfileData","goToEditMode","fullName","Post","img","alt","name","post","likePNG","addLike","p","id","likesCount","MyPosts","page","setPage","postsArray","postData","allPage","Math","ceil","length","pageVision","i","push","portionArray","slice","startMessage","endMessage","foo","postsElements","map","avatar","message","buttonName","pagination","index","isActive","AddNewPostFormRedux","onSubmit","values","addPost","newMessageBody","maxLength10","maxLengthCreator","reduxForm","form","dispatch","useAppDispatch","handleSubmit","Field","component","TextArea","placeholder","validate","required","onKeyDown","keyCode","addPostAC","MyPostsContainer","connect","newPostText","idUser","Profile","Preloader","ProfileContainer","userId","match","params","authorizedUserId","history","setUserProfileThunk","getStatus","refreshProfile","compose","auth","isAuth","withRouter"],"sourceRoot":""}