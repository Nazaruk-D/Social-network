{"version":3,"file":"static/js/512.eb35648c.chunk.js","mappings":"8LACA,G,QAA0B,0BAA1B,EAA4D,wBAA5D,EAA+F,0BCA/F,GAAgB,IAAM,wBAAwB,OAAS,4B,mBCS1CA,EAAwC,SAACC,GAClD,OACI,gBAAKC,UAAWC,EAAAA,MAAhB,UACI,SAAC,KAAD,CAASC,GAAI,YAAcH,EAAMI,GAAjC,UACI,4BACI,4BACA,2BACI,yBAAI,gBAAKC,IAAKL,EAAMM,IAAKL,UAAWC,EAAAA,IAAOK,IAAI,QAC/C,eAAIN,UAAWC,EAAAA,OAAf,SAA0BF,EAAMQ,mBCjBxD,EAAwB,uBCWXC,EAAkC,SAACT,GAE5C,OACI,gBAAKC,UAAWC,EAAhB,SACKF,EAAMU,W,uCCkDbC,GAAcC,EAAAA,EAAAA,GAAiB,IAe/BC,GAAsBC,EAAAA,EAAAA,GAA8B,CAACC,KAAM,wBAArCD,EAbmD,SAACd,GAC5E,OACI,kBAAMgB,SAAUhB,EAAMiB,aAAtB,WACI,0BACI,SAACC,EAAA,EAAD,CAAOC,UAAWC,EAAAA,GAAUC,SAAU,CAACC,EAAAA,EAAUX,GAAcH,KAAM,iBAAkBe,YAAa,0BAExG,0BACI,qD,qDChEZC,EAA6B,SAACC,GAC9B,MAAO,CACHC,OAAQD,EAAME,KAAKD,SCK3B,IAgBA,GAAeE,EAAAA,EAAAA,KDhBR,SAA6BC,GAQhC,OAAOC,EAAAA,EAAAA,IAAQN,EAA4B,CAACO,gBAAAA,EAAAA,GAAiBC,OAAAA,EAAAA,IAAtDF,EAPmB,SAAC9B,GACvB,IAAK0B,EAAwB1B,EAAxB0B,OAAWO,GAAhB,OAA6BjC,EAA7B,GACA,OAAK0B,GACE,SAACG,GAAD,UAAeI,KADF,SAAC,KAAD,CAAU9B,GAAI,iBCetC2B,EAAAA,EAAAA,KAlBkB,SAACL,GACnB,MAAO,CACHA,MAAOA,EAAMS,YAKI,SAACC,GACtB,MAAO,CACHC,YAAa,SAACC,GACVF,GAASG,EAAAA,EAAAA,IAAmBD,SAMxC,EFdkD,SAACrC,GAE/C,IAAIuC,EAAiBvC,EAAMyB,MAAMe,YAAYC,KAAI,SAACC,GAAD,OAA6B,0BAAqB,SAAC3C,EAAD,CAC/FS,KAAMkC,EAAOlC,KACbJ,GAAIsC,EAAOtC,GACXE,IAAKoC,EAAOpC,OAHwEoC,EAAOtC,OAK3FuC,EAAkB3C,EAAMyB,MAAMmB,aAAaH,KAAI,SAAC/B,GAAD,OAA+B,0BAAsB,SAACD,EAAD,CACpGD,KAAME,EAAQF,KACdJ,GAAIM,EAAQN,GACZE,IAAKI,EAAQJ,IACbI,QAASA,EAAQA,WAJuEA,EAAQN,OAcpG,OACI,iBAAKH,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,SACKqC,KAEL,iBAAKtC,UAAWC,EAAhB,WACI,yBACKyC,KAEL,SAAC9B,EAAD,CAAqBG,SAbX,SAAC6B,GACnB7C,EAAMoC,YAAYS,EAAOR","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","webpack://samurai-way/./src/components/Dialogs/DialogsComponents/DialogItem.module.css?51c3","components/Dialogs/DialogsComponents/DialogItem.tsx","webpack://samurai-way/./src/components/Dialogs/DialogsComponents/Message.module.css?9791","components/Dialogs/DialogsComponents/Message.tsx","components/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__l5IZ+\",\"dialog\":\"Dialogs_dialog__PXe4x\",\"messages\":\"Dialogs_messages__bJNN8\"};","// extracted by mini-css-extract-plugin\nexport default {\"ava\":\"DialogItem_ava__vkw7q\",\"nameTd\":\"DialogItem_nameTd__kuhYJ\"};","import React from \"react\";\r\nimport s from \"./DialogItem.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype DialogItemProps = {\r\n    name: string\r\n    id: string\r\n    ava: string\r\n}\r\n\r\nexport const DialogItem: React.FC<DialogItemProps> = (props) => {\r\n    return (\r\n        <div className={s.block}>\r\n            <NavLink to={\"/dialogs/\" + props.id}>\r\n                <table>\r\n                    <tbody>\r\n                    <tr>\r\n                        <td><img src={props.ava} className={s.ava} alt=\"\"/></td>\r\n                        <td className={s.nameTd}>{props.name}</td>\r\n                    </tr>\r\n                    </tbody>\r\n                </table>\r\n            </NavLink>\r\n        </div>\r\n    )\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"block\":\"Message_block__K2rKi\",\"message\":\"Message_message__LwDtP\"};","import React from \"react\";\r\nimport s from \"./Message.module.css\"\r\n\r\n\r\ntype MessageProps = {\r\n    name: string\r\n    id: string\r\n    message: string\r\n    ava: string\r\n    // newMessageBody: string\r\n}\r\n\r\nexport const Message: React.FC<MessageProps> = (props) => {\r\n\r\n    return (\r\n        <div className={s.block}>\r\n            {props.message}\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n","import React from 'react';\r\nimport s from './Dialogs.module.css'\r\nimport {DialogItem} from \"./DialogsComponents/DialogItem\";\r\nimport {Message} from \"./DialogsComponents/Message\";\r\n\r\nimport {DialogsDataType, InitialStateType, MessagesDataType} from \"../../redux/dialogs-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {TextArea} from \"../common/FormsControl/FormsControl\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\r\n\r\nexport type DialogTypeProps = {\r\n    SendMessage: (values: string) => void\r\n    updateNewMessageBody: (body: any) => void\r\n    state: InitialStateType\r\n    newMessageBody: string\r\n    isAuth: boolean\r\n}\r\n\r\n\r\nexport const Dialogs: React.FC<DialogTypeProps> = (props) => {\r\n    // debugger\r\n    let dialogElements = props.state.dialogsData.map((dialog: DialogsDataType) => <div key={dialog.id}><DialogItem\r\n        name={dialog.name}\r\n        id={dialog.id}\r\n        ava={dialog.ava}/>\r\n    </div>)\r\n    let messageElements = props.state.messagesData.map((message: MessagesDataType) => <div key={message.id}><Message\r\n        name={message.name}\r\n        id={message.id}\r\n        ava={message.ava}\r\n        message={message.message}\r\n    />\r\n    </div>)\r\n\r\n    // if (!props.isAuth) return <Redirect to={\"/login\"}/>\r\n\r\n    const addNewMessage = (values: AddMessageFormType) => {\r\n        props.SendMessage(values.newMessageBody)\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialog}>\r\n                {dialogElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>\r\n                    {messageElements}\r\n                </div>\r\n                <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n            </div>\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport type AddMessageFormType = {\r\n    newMessageBody: string\r\n}\r\n\r\nconst maxLength50 = maxLengthCreator(50)\r\n\r\nexport const AddMessageForm: React.FC<InjectedFormProps<AddMessageFormType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={TextArea} validate={[required, maxLength50]} name={\"newMessageBody\"} placeholder={\"Enter your message\"}/>\r\n            </div>\r\n            <div>\r\n                <button>Send message</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm<AddMessageFormType>({form: \"dialogAddMessageForm\"})(AddMessageForm)","import React, {ComponentType} from 'react';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\nimport {getAuthUserData, logout} from \"../redux/auth-reducer\";\r\n\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n    const RedirectComponent = (props: MapStatePropsType) => {\r\n        let {isAuth, ...restProps} = props;\r\n        if (!isAuth) return <Redirect to={\"/login\"}/>\r\n        return <Component {...restProps as T}/>\r\n    };\r\n\r\n\r\n    return connect(mapStateToPropsForRedirect, {getAuthUserData, logout})(RedirectComponent);\r\n}\r\n\r\n","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {InitialStateType, SendMessageCreator} from \"../../redux/dialogs-reducer\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {Dialogs} from \"./Dialogs\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\n\r\n\r\ntype MapStatePropsType = {\r\n    state: InitialStateType\r\n    // isAuth: boolean\r\n}\r\ntype MapDispatchPropType = {\r\n    SendMessage: (newMessageBody: string) => void\r\n}\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        state: state.dialogs,\r\n        // isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropType => {\r\n    return {\r\n        SendMessage: (newMessageBody: string) => {\r\n            dispatch(SendMessageCreator(newMessageBody))\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    withAuthRedirect,\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n)(Dialogs)\r\n\r\n"],"names":["DialogItem","props","className","s","to","id","src","ava","alt","name","Message","message","maxLength50","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","TextArea","validate","required","placeholder","mapStateToPropsForRedirect","state","isAuth","auth","compose","Component","connect","getAuthUserData","logout","restProps","dialogs","dispatch","SendMessage","newMessageBody","SendMessageCreator","dialogElements","dialogsData","map","dialog","messageElements","messagesData","values"],"sourceRoot":""}