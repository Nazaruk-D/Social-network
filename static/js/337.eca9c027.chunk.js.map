{"version":3,"file":"static/js/337.eca9c027.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Profile/Profile.module.scss?4008","webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileInfo.module.scss?e49f","components/Profile/ProfileInfo/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","webpack://samurai-way/./src/components/common/UploadPhoto/UploadPhoto.module.scss?d9c3","components/common/UploadPhoto/FileInput.tsx","components/common/UploadPhoto/ImageCropper.tsx","components/common/UploadPhoto/UploadPhoto.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/Myposts/MyPosts.module.scss?f352","webpack://samurai-way/./src/components/Profile/Myposts/Posts/Post.module.scss?d046","components/Profile/Myposts/Posts/Post.tsx","components/Profile/Myposts/MyPosts.tsx","components/Profile/Myposts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","hoc/withAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"profileContainer\":\"Profile_profileContainer__GK-ND\"};","// extracted by mini-css-extract-plugin\nexport default {\"profileInfoContainer\":\"ProfileInfo_profileInfoContainer__9v5Ik\",\"profileInfoBlock\":\"ProfileInfo_profileInfoBlock__goYeC\",\"avatarBlock\":\"ProfileInfo_avatarBlock__21pru\",\"mainAvatar\":\"ProfileInfo_mainAvatar__jA7Gf\",\"avatar\":\"ProfileInfo_avatar__KQ0zh\",\"updatePhoto\":\"ProfileInfo_updatePhoto__ASuP0\",\"updatePhotoButton\":\"ProfileInfo_updatePhotoButton__r62FH\",\"back\":\"ProfileInfo_back__DRn5g\",\"uploadPhotoBlock\":\"ProfileInfo_uploadPhotoBlock__usFJj\",\"supportText\":\"ProfileInfo_supportText__YZUeA\",\"uploadPhoto\":\"ProfileInfo_uploadPhoto__1VHeP\",\"inputUploadPhoto\":\"ProfileInfo_inputUploadPhoto__UajYh\",\"profileBlock\":\"ProfileInfo_profileBlock__5piPY\",\"profileStatus\":\"ProfileInfo_profileStatus__jnFRU\",\"profileDataForm\":\"ProfileInfo_profileDataForm__O8l5p\",\"buttonEditProfile\":\"ProfileInfo_buttonEditProfile__2LsHa\"};","import React from 'react';\r\n\r\ntype ProfileStatusType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nclass ProfileStatus extends React.Component<ProfileStatusType> {\r\n\r\n    state = {\r\n        editMode: false,\r\n        status: this.props.status\r\n    }\r\n\r\n    activateEditeMode = () => {\r\n        this.setState({\r\n            editMode: true\r\n        })\r\n    }\r\n\r\n    deactivateEditeMode = () => {\r\n        this.setState({\r\n            editMode: false\r\n        })\r\n        this.props.updateStatus(this.state.status)\r\n    }\r\n\r\n    onStatusChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({\r\n            status: e.currentTarget.value\r\n        })\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<ProfileStatusType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        if ( prevProps.status !== this.props.status ) {  this.setState({ status: this.props.status })  }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {!this.state.editMode &&\r\n                    <div>\r\n                        <span\r\n                            onDoubleClick={this.activateEditeMode}>{this.props.status ? this.props.status : \"изменить статус\"}</span>\r\n                    </div>\r\n                }\r\n                {this.state.editMode &&\r\n                    <div>\r\n                        <input onChange={this.onStatusChange} value={this.state.status}\r\n                               onBlur={this.deactivateEditeMode} autoFocus></input>\r\n                    </div>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ProfileStatus;","import React, {FC} from 'react';\r\nimport {createField, Input} from \"../../common/FormsControl/FormsControl\";\r\n\r\ntype ProfileDataFormPropsType = {\r\n    // profile: ProfileType\r\n    profile: any\r\n}\r\n\r\nexport const ProfileDataForm: FC<ProfileDataFormPropsType> = ({profile}) => {\r\n    return (\r\n        <form>\r\n            <div>\r\n                <b>Full Name</b>: {createField(\"Full name\", \"fullname\", [], Input)}\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job</b>: {profile!.lookingForAJob ? \"yes\" : \"no\"}\r\n            </div>\r\n            {profile!.lookingForAJob &&\r\n                <div>\r\n                    <b>My professional skills</b>: {profile!.lookingForAJobDescription}\r\n                </div>\r\n            }\r\n            <div>\r\n                <b>About me</b>: {profile!.aboutMe}\r\n            </div>\r\n            <div>\r\n                {/*<b>Contacts</b>: {Object.keys(profile!.contacts).map((key) => {*/}\r\n                {/*return <Contact key={key} contactTitle={key} contactValue={profile!.contacts[key]} />*/}\r\n                {/*})}*/}\r\n            </div>\r\n            <button onClick={()=>{}}>save</button>\r\n        </form>\r\n    );\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {\"uploadPhotoContainer\":\"UploadPhoto_uploadPhotoContainer__I1+lI\",\"closeTag\":\"UploadPhoto_closeTag__pfnpE\",\"cropperContainer\":\"UploadPhoto_cropperContainer__XwKCl\",\"cropper\":\"UploadPhoto_cropper__19sTC\",\"settings\":\"UploadPhoto_settings__UgolO\",\"radioButton\":\"UploadPhoto_radioButton__9bxUv\",\"buttons\":\"UploadPhoto_buttons__KxXwU\",\"button\":\"UploadPhoto_button__OU0yZ\"};","import React, {FC, useRef} from \"react\";\r\nimport s from './UploadPhoto.module.scss'\r\nimport './Style.css'\r\n\r\ntype FileInputPropsType = {\r\n  onImageSelected: (selectedImg: any) => void\r\n}\r\n\r\nconst FileInput: FC<FileInputPropsType> = ({ onImageSelected }) => {\r\n  const inputRef = useRef<any>();\r\n\r\n  const handleOnChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    if (event.target.files && event.target.files.length > 0) {\r\n      const reader = new FileReader();\r\n      reader.readAsDataURL(event.target.files[0]);\r\n      reader.onload = function (e) {\r\n        onImageSelected(reader.result);\r\n      };\r\n    }\r\n  };\r\n\r\n  const onChooseImg = () => {\r\n    inputRef.current.click();\r\n  };\r\n\r\n  return (\r\n    <div className={s.fileInputContainer}>\r\n      <input\r\n        type=\"file\"\r\n        accept=\"image/*\"\r\n        ref={inputRef}\r\n        onChange={handleOnChange}\r\n        style={{ display: \"none\" }}\r\n      />\r\n\r\n      <button className=\"btn\" onClick={onChooseImg}>\r\n        Choose Image\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FileInput;","import React, {FC, useState} from \"react\";\r\nimport Cropper, {Area} from \"react-easy-crop\";\r\nimport s from './UploadPhoto.module.scss'\r\n\r\n\r\ntype ImageCropperPropsType = {\r\n    image: string\r\n    onCropDone: (imgCroppedArea: any) => void\r\n    onCropCancel: () => void\r\n}\r\n\r\nconst ImageCropper: FC<ImageCropperPropsType> = ({ image, onCropDone, onCropCancel }) => {\r\n    const [crop, setCrop] = useState({ x: 0, y: 0 });\r\n    const [zoom, setZoom] = useState(1);\r\n    const [croppedArea, setCroppedArea] = useState(null);\r\n    const [aspectRatio, setAspectRatio] = useState(5 / 4);\r\n\r\n    const onCropComplete = (croppedAreaPercentage: Area, croppedAreaPixels: any) => {\r\n        setCroppedArea(croppedAreaPixels);\r\n    };\r\n\r\n    const onAspectRatioChange = (event: any) => {\r\n        setAspectRatio(event.target.value);\r\n    };\r\n\r\n    const zoomHandler = () => {\r\n        window.onwheel = (e) => {\r\n            if (e.deltaY < 0) {\r\n                setZoom(zoom + 0.2)\r\n            } else {\r\n                setZoom(zoom - 0.2)\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={s.cropperContainer}>\r\n            <div className={s.cropper}>\r\n                <Cropper\r\n                    image={image}\r\n                    aspect={aspectRatio}\r\n                    crop={crop}\r\n                    zoom={zoom}\r\n                    onCropChange={setCrop}\r\n                    onZoomChange={zoomHandler}\r\n                    onCropComplete={onCropComplete}\r\n                    style={{\r\n                        containerStyle: {\r\n                            width: \"100%\",\r\n                            height: \"80%\",\r\n                            backgroundColor: \"#fff\",\r\n                        },\r\n                    }}\r\n                />\r\n            </div>\r\n\r\n            <div className={s.settings}>\r\n                <div className={s.radioButton} onChange={onAspectRatioChange}>\r\n                    <input type=\"radio\" value={1 / 1} name=\"ratio\"/> 1:1\r\n                    <input type=\"radio\" value={5 / 4} name=\"ratio\"/> 5:4\r\n                    <input type=\"radio\" value={4 / 3} name=\"ratio\" /> 4:3\r\n                    <input type=\"radio\" value={3 / 2} name=\"ratio\" /> 3:2\r\n                    <input type=\"radio\" value={5 / 3} name=\"ratio\" /> 5:3\r\n                    <input type=\"radio\" value={16 / 9} name=\"ratio\" /> 16:9\r\n                    <input type=\"radio\" value={3 / 1} name=\"ratio\" /> 3:1\r\n                </div>\r\n\r\n\r\n                <div className={s.buttons}>\r\n                    <button className={s.button} onClick={onCropCancel}>\r\n                        Cancel\r\n                    </button>\r\n\r\n                    <button\r\n                        className={s.button}\r\n                        onClick={() => {\r\n                            onCropDone(croppedArea);\r\n                        }}\r\n                    >\r\n                        Done\r\n                    </button>\r\n                </div>\r\n\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ImageCropper;","import React, {FC, useState} from \"react\";\r\nimport FileInput from \"./FileInput\";\r\nimport ImageCropper from \"./ImageCropper\";\r\nimport s from './UploadPhoto.module.scss'\r\n\r\ntype UploadPhotoPropsType = {\r\n    setUploadPhoto: (uploadPhoto: boolean) => void\r\n    savePhoto: (file: any) => void\r\n}\r\n\r\nconst UploadPhoto: FC<UploadPhotoPropsType> = ({savePhoto, setUploadPhoto}) => {\r\n    const [image, setImage] = useState(\"\");\r\n    const [currentPage, setCurrentPage] = useState(\"choose-img\");\r\n    const [imgAfterCrop, setImgAfterCrop] = useState(\"\");\r\n\r\n    // Invoked when new image file is selected\r\n    const onImageSelected = (selectedImg: string) => {\r\n        setImage(selectedImg);\r\n        setCurrentPage(\"crop-img\");\r\n    };\r\n\r\n    // Generating Cropped Image When Done Button Clicked\r\n    const onCropDone = (imgCroppedArea: any) => {\r\n\r\n        const canvasEle = document.createElement(\"canvas\");\r\n        canvasEle.width = imgCroppedArea.width;\r\n        canvasEle.height = imgCroppedArea.height;\r\n\r\n        const context = canvasEle.getContext(\"2d\");\r\n\r\n        let imageObj1 = new Image();\r\n        imageObj1.src = image;\r\n        imageObj1.onload = function () {\r\n            context!.drawImage(\r\n                imageObj1,\r\n                imgCroppedArea.x,\r\n                imgCroppedArea.y,\r\n                imgCroppedArea.width,\r\n                imgCroppedArea.height,\r\n                0,\r\n                0,\r\n                imgCroppedArea.width,\r\n                imgCroppedArea.height\r\n            );\r\n\r\n            const dataURL = canvasEle.toDataURL(\"image/jpeg\");\r\n\r\n            setImgAfterCrop(dataURL);\r\n            setCurrentPage(\"img-cropped\");\r\n            savePhoto(dataURL)\r\n\r\n            urlToObject(dataURL)\r\n\r\n        };\r\n    };\r\n\r\n    const urlToObject = async (imageURL: string) => {\r\n        debugger\r\n        const response = await fetch(imageURL);\r\n        // here image is url/location of image\r\n        const blob = await response.blob();\r\n        // const file = new File([blob], 'image.jpg', {type: blob.type});\r\n        var image = new Image();\r\n        image.src = imageURL\r\n        console.log(image)\r\n        const file = new File([blob], 'image.jpg', {type: blob.type});\r\n        // {type: 'image/jpg'}\r\n        console.log(file)\r\n        savePhoto(file)\r\n        setUploadPhoto(false)\r\n    }\r\n\r\n    // Handle Cancel Button Click\r\n    const onCropCancel = () => {\r\n        setCurrentPage(\"choose-img\");\r\n        setImage(\"\");\r\n    };\r\n\r\n    return (\r\n        <div className={s.uploadPhotoContainer}>\r\n            <div className={s.closeTag} onClick={() => setUploadPhoto(false)}>X</div>\r\n            {currentPage === \"choose-img\" ? (\r\n                <FileInput onImageSelected={onImageSelected}/>\r\n            ) : currentPage === \"crop-img\" ? (\r\n                <ImageCropper\r\n                    image={image}\r\n                    onCropDone={onCropDone}\r\n                    onCropCancel={onCropCancel}\r\n                />\r\n            ) : (\r\n                <div className={s.bottomBlock}>\r\n                    <div>\r\n                        <img src={imgAfterCrop} className={s.croppedIMG}/>\r\n                    </div>\r\n\r\n                    <button\r\n                        onClick={() => {\r\n                            setCurrentPage(\"crop-img\");\r\n                        }}\r\n                        className=\"btn\"\r\n                    >\r\n                        Crop\r\n                    </button>\r\n\r\n                    <button\r\n                        onClick={() => {\r\n                            setCurrentPage(\"choose-img\");\r\n                            setImage(\"\");\r\n                        }}\r\n                        className=\"btn\"\r\n                    >\r\n                        New Image\r\n                    </button>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default UploadPhoto;","import React, {FC, useState} from \"react\";\r\nimport s from \"./ProfileInfo.module.scss\";\r\nimport {ProfileType} from \"../../../redux/profile-reducer\";\r\nimport ProfileStatus from './ProfileStatus'\r\nimport {ProfileDataForm} from \"./ProfileDataForm\";\r\nimport uploadPhotoPNG from '../../../assets/png/uploadPhoto.png'\r\nimport {getRandomArrayElement} from \"../../Users/getRandomArrayElement\";\r\nimport 'react-image-crop/src/ReactCrop.scss'\r\nimport UploadPhoto from \"../../common/UploadPhoto/UploadPhoto\";\r\n\r\n\r\n\r\ntype ProfileInfoType = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: any) => void\r\n    // photo: string | null\r\n}\r\n\r\nexport const ProfileInfo: React.FC<ProfileInfoType> = ({profile, isOwner, savePhoto, ...props}) => {\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [uploadPhoto, setUploadPhoto] = useState(false)\r\n\r\n    // const [src, setSrc] = useState<any>()\r\n    //\r\n    // const mainPhotoSelectedHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    //     e.preventDefault()\r\n    //     if (e.target.files![0]) {\r\n    //         // savePhoto(e.target.files![0])\r\n    //         console.log(e.target.files![0])\r\n    //         setSrc(URL.createObjectURL(e.target.files![0]));\r\n    //     }\r\n    // }\r\n\r\n    return (\r\n        <div className={s.profileInfoContainer}>\r\n            <div className={s.profileInfoBlock}>\r\n                <div className={s.avatarBlock}>\r\n                    {/*<img src={u.photos.small != null     ? u.photos.small : getRandomArrayElement()} className={s.avatarImg}/>*/}\r\n                    <div className={s.mainAvatar}>\r\n                        <img src={profile?.photos.large !== null ? profile?.photos.large : getRandomArrayElement()}\r\n                             className={s.avatar}/>\r\n                        <div className={s.updatePhoto}>\r\n                            <button className={s.updatePhotoButton} onClick={() => setUploadPhoto(true)}> Upload photo</button>\r\n                        </div>\r\n                        {uploadPhoto && <UploadPhoto savePhoto={savePhoto} setUploadPhoto={setUploadPhoto}/>}\r\n\r\n                    </div>\r\n\r\n\r\n\r\n                    {/*{isOwner &&*/}\r\n                    {/*    <label htmlFor={\"inputTag\"}>*/}\r\n                    {/*        <div className={s.uploadPhotoBlock}>*/}\r\n                    {/*            <div className={s.supportText}>Click to upload photo</div>*/}\r\n                    {/*            <img src={uploadPhotoPNG} alt=\"uploadPhoto\" className={s.uploadPhoto}/>*/}\r\n                    {/*        </div>*/}\r\n                    {/*        <input id={\"inputTag\"} type=\"file\" onChange={mainPhotoSelectedHandler}*/}\r\n                    {/*               className={s.inputUploadPhoto}/>*/}\r\n                    {/*    </label>}*/}\r\n                </div>\r\n                <div className={s.profileBlock}>\r\n                    <div className={s.profileStatus}>\r\n                        <div>Status:</div>\r\n                        <ProfileStatus status={props.status} updateStatus={props.updateStatus}/>\r\n                    </div>\r\n\r\n                    {editMode\r\n                        ? <div className={s.profileDataForm}>\r\n                            <ProfileDataForm profile={profile}/>\r\n                        </div>\r\n                        : <div className={s.profileDataForm}>\r\n                            <ProfileData goToEditMode={() => setEditMode(true)} profile={profile} isOwner={isOwner}/>\r\n                        </div>\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype ProfileBlockPropsType = {\r\n    profile: ProfileType\r\n    isOwner?: boolean\r\n    goToEditMode?: () => void\r\n}\r\n\r\nconst ProfileData: FC<ProfileBlockPropsType> = ({profile, isOwner, goToEditMode}) => {\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <b>Full Name</b>: {profile!.fullName}\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job</b>: {profile!.lookingForAJob ? \"yes\" : \"no\"}\r\n            </div>\r\n            {profile!.lookingForAJob &&\r\n                <div>\r\n                    <b>My professional skills</b>: {profile!.lookingForAJobDescription}\r\n                </div>\r\n            }\r\n            <div>\r\n                <b>About me</b>: {profile!.aboutMe}\r\n            </div>\r\n            <div>\r\n                {/*<b>Contacts</b>: {Object.keys(profile!.contacts).map((key) => {*/}\r\n                {/*return <Contact key={key} contactTitle={key} contactValue={profile!.contacts[key]} />*/}\r\n                {/*})}*/}\r\n            </div>\r\n            {isOwner && <button onClick={goToEditMode} className={s.buttonEditProfile}>edit</button>}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Contact = (contactTitle: string, contactValue: string) => {\r\n    return <div><b>{contactTitle}</b>: {contactValue}</div>\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"myPostContainer\":\"MyPosts_myPostContainer__3vuVZ\",\"addForm\":\"MyPosts_addForm__CwT0C\",\"formContainer\":\"MyPosts_formContainer__Vqz3M\",\"textArea\":\"MyPosts_textArea__M7vK7\",\"addPostButton\":\"MyPosts_addPostButton__Lcz4a\",\"messageBlock\":\"MyPosts_messageBlock__4JDWJ\",\"item\":\"MyPosts_item__ydHH-\",\"paginationBlock\":\"MyPosts_paginationBlock__3AASw\",\"pagination\":\"MyPosts_pagination__NnNu+\"};","// extracted by mini-css-extract-plugin\nexport default {\"postContainer\":\"Post_postContainer__jxQ-s\",\"avaBlock\":\"Post_avaBlock__8rQEc\",\"ava\":\"Post_ava__wjWVP\",\"textBlock\":\"Post_textBlock__UkJVG\",\"name\":\"Post_name__Xr5Bj\",\"message\":\"Post_message__Qy6Nf\",\"like\":\"Post_like__wVdVD\"};","import React from \"react\";\r\nimport s from \"./Post.module.scss\";\r\nimport likePNG from '../../../../assets/png/like.png'\r\nimport {postDataPropsType} from \"../../../../redux/profile-reducer\";\r\n\r\ntype DataTypeProps = {\r\n    post: string\r\n    name: string\r\n    img: string\r\n    buttonName: string\r\n    likesCount: number\r\n    p: postDataPropsType\r\n    addLike: (idUser: string) => void\r\n}\r\n\r\nexport const Post: React.FC<DataTypeProps> = (props) => {\r\n\r\n\r\n    return (\r\n        <div className={s.postContainer}>\r\n            <div className={s.avaBlock}><img src={props.img} alt=\"avatar\" className={s.ava}/></div>\r\n            <div className={s.textBlock}>\r\n                <div className={s.name}>{props.name}</div>\r\n                <div className={s.message}>{props.post}</div>\r\n            </div>\r\n            <img src={likePNG} alt=\"likePNG\" className={s.like} onClick={()=>props.addLike(props.p.id)}/> {props.likesCount}\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n","import React, {useState} from \"react\";\r\nimport s from \"./MyPosts.module.scss\";\r\nimport {Post} from \"./Posts/Post\";\r\nimport {addPostAC, profilePagePropsType} from \"../../../redux/profile-reducer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {AddMessageFormType} from \"../../Dialogs/Dialogs\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {TextArea} from \"../../common/FormsControl/FormsControl\";\r\nimport {useAppDispatch} from \"../../../redux/redux-store\";\r\n\r\n\r\ntype MyPostPropType = {\r\n    state: profilePagePropsType\r\n    addPost: (values: string) => void\r\n    addLike: (idUser: string) => void\r\n}\r\n\r\nexport const MyPosts: React.FC<MyPostPropType> = React.memo((props) => {\r\n\r\n    const [page, setPage] = useState(1)\r\n    const postsArray = props.state.postData\r\n    const allPage = Math.ceil(postsArray.length / 5)\r\n    const pageVision = []\r\n\r\n    for (let i = 1; i < allPage + 1; i++) {\r\n        pageVision.push(i)\r\n    }\r\n    const foo = (page: number) => {\r\n        if (page === 1) {\r\n            return postsArray.slice(0, 5)\r\n        } else if (page > 1) {\r\n            const startMessage = (page * 5) - 5\r\n            const endMessage = page * 5\r\n            return postsArray.slice(startMessage, endMessage)\r\n        }\r\n    }\r\n\r\n    const portionArray = foo(page)\r\n\r\n    let postsElements = portionArray!.map(p => <div key={p.id}><Post img={p.avatar}\r\n                                                                     name={p.name}\r\n                                                                     post={p.message}\r\n                                                                     likesCount={p.likesCount}\r\n                                                                     buttonName={\"Like\"}\r\n                                                                     addLike={props.addLike}\r\n                                                                     p={p}\r\n    />\r\n    </div>)\r\n\r\n    let pagination = pageVision.map((p, index) => {\r\n        const isActive = page === p ? {color: \"rgb(211, 181, 91)\"} : {}\r\n        return <span key={index} className={s.pagination} style={isActive} onClick={() => setPage(p)}>{p}</span>\r\n    })\r\n\r\n    const addPost = (values: AddMessageFormType) => {\r\n        props.addPost(values.newMessageBody)\r\n    }\r\n\r\n    return (\r\n        <div className={s.myPostContainer}>\r\n            <div className={s.addForm}>\r\n                <AddNewPostFormRedux onSubmit={addPost}/>\r\n            </div>\r\n            <div className={s.messageBlock}>\r\n                <div className={s.item}>\r\n                    {postsElements}\r\n                </div>\r\n            </div>\r\n            <div className={s.paginationBlock}>\r\n                {pagination.length > 1 && pagination}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\ntype AddNewPostFormType = {\r\n    newMessageBody: string\r\n}\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\n\r\nconst AddNewPostForm: React.FC<InjectedFormProps<AddNewPostFormType>> = (props) => {\r\n    const dispatch = useAppDispatch()\r\n    const onKeyDownHandler = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.keyCode === 13) {\r\n            dispatch(addPostAC(e.currentTarget.value))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit} className={s.formContainer}>\r\n            <Field component={TextArea} name={\"newMessageBody\"} placeholder={\"Enter your message\"}\r\n                   className={s.textArea} validate={[required, maxLength10]} onKeyDown={onKeyDownHandler}/>\r\n            <button className={s.addPostButton}>AddPost</button>\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\nconst AddNewPostFormRedux = reduxForm<AddNewPostFormType>({form: \"profileAddMessageForm\"})(AddNewPostForm)\r\n\r\n","import React from \"react\";\r\nimport {MyPosts} from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {addLike, addPostAC, profilePagePropsType} from \"../../../redux/profile-reducer\";\r\n\r\ntype MapStatePropsType = {\r\n    state: profilePagePropsType\r\n}\r\ntype MapDispatchPropType = {\r\n    addPost: (newMessageBody: string) => void\r\n    addLike: (idUser: string) => void\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType=> {\r\n    return {\r\n        state: state.profile\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropType => {\r\n    return {\r\n        addPost: (newPostText: string) => {\r\n            dispatch(addPostAC(newPostText))\r\n        },\r\n        addLike: (idUser: string) => {\r\n            dispatch(addLike(idUser))\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\n","import React from \"react\";\r\nimport s from \"./Profile.module.scss\";\r\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\nimport {MyPostsContainer} from \"./Myposts/MyPostsContainer\";\r\nimport {ProfileType} from \"../../redux/profile-reducer\";\r\nimport {Preloader} from \"../common/Preloader/Preloader\";\r\n\r\ntype ProfileTypeProps = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: any\r\n    // photo: string | null\r\n}\r\n\r\nexport const Profile: React.FC<ProfileTypeProps> = (props) => {\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n    return (\r\n        <div className={s.profileContainer}>\r\n            <ProfileInfo\r\n                profile={props.profile}\r\n                status={props.status}\r\n                updateStatus={props.updateStatus}\r\n                isOwner={props.isOwner}\r\n                savePhoto={props.savePhoto}\r\n            />\r\n            <MyPostsContainer/>\r\n        </div>);\r\n}\r\n\r\n","import React from \"react\";\r\nimport {Profile} from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {getStatus, ProfileType, savePhoto, setUserProfileThunk, updateStatus} from \"../../redux/profile-reducer\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\ntype PathParamType = {\r\n    userId: string\r\n}\r\n\r\ntype MapStatePropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    authorizedUserId: string\r\n    isAuth: boolean\r\n    // photo: string | null\r\n}\r\ntype MapDispatchPropType = {\r\n    setUserProfileThunk: (userId: string) => void\r\n    getStatus: (userId: string) => void\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (file: any) => void\r\n}\r\n\r\ntype ProfileContainerPropsType = RouteComponentProps<PathParamType> &  MapStatePropsType & MapDispatchPropType\r\n\r\nclass ProfileContainer extends React.Component<ProfileContainerPropsType> {\r\n\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId\r\n        if(!userId) {\r\n            // userId = \"25415\"\r\n            userId = this.props.authorizedUserId\r\n            if(!userId) {\r\n                this.props.history.push(\"/login\")\r\n            }\r\n        } // 25415\r\n        this.props.setUserProfileThunk(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<ProfileContainerPropsType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        if(this.props.match.params.userId !== prevProps.match.params.userId )\r\n            this.refreshProfile()\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <Profile\r\n                profile={this.props.profile}\r\n                status={this.props.status}\r\n                updateStatus={this.props.updateStatus}\r\n                isOwner={!this.props.match.params.userId}\r\n                savePhoto={this.props.savePhoto}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        profile: state.profile.profile,\r\n        status: state.profile.status,\r\n        authorizedUserId: state.auth.id,\r\n        isAuth: state.auth.isAuth,\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {setUserProfileThunk, getStatus, updateStatus, savePhoto}),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer)\r\n","import React, {ComponentType} from 'react';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\nimport {getAuthUserData, logout} from \"../redux/auth-reducer\";\r\n\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n    const RedirectComponent = (props: MapStatePropsType) => {\r\n        let {isAuth, ...restProps} = props;\r\n        if (!isAuth) return <Redirect to={\"/login\"}/>\r\n        return <Component {...restProps as T}/>\r\n    };\r\n\r\n\r\n    return connect(mapStateToPropsForRedirect, {getAuthUserData, logout})(RedirectComponent);\r\n}\r\n\r\n"],"names":["ProfileStatus","state","editMode","status","props","activateEditeMode","setState","deactivateEditeMode","updateStatus","onStatusChange","e","currentTarget","value","prevProps","prevState","snapshot","this","onDoubleClick","onChange","onBlur","autoFocus","React","ProfileDataForm","profile","createField","Input","lookingForAJob","lookingForAJobDescription","aboutMe","onClick","onImageSelected","inputRef","useRef","className","s","type","accept","ref","event","target","files","length","reader","FileReader","readAsDataURL","onload","result","style","display","current","click","image","onCropDone","onCropCancel","useState","x","y","crop","setCrop","zoom","setZoom","croppedArea","setCroppedArea","aspectRatio","setAspectRatio","aspect","onCropChange","onZoomChange","window","onwheel","deltaY","onCropComplete","croppedAreaPercentage","croppedAreaPixels","containerStyle","width","height","backgroundColor","name","savePhoto","setUploadPhoto","setImage","currentPage","setCurrentPage","imgAfterCrop","setImgAfterCrop","urlToObject","imageURL","fetch","response","blob","Image","src","console","log","file","File","selectedImg","imgCroppedArea","canvasEle","document","createElement","context","getContext","imageObj1","drawImage","dataURL","toDataURL","ProfileInfo","isOwner","setEditMode","uploadPhoto","photos","large","getRandomArrayElement","ProfileData","goToEditMode","fullName","Post","img","alt","post","likePNG","addLike","p","id","likesCount","MyPosts","page","setPage","postsArray","postData","allPage","Math","ceil","pageVision","i","push","portionArray","slice","startMessage","endMessage","foo","postsElements","map","avatar","message","buttonName","pagination","index","isActive","color","AddNewPostFormRedux","onSubmit","values","addPost","newMessageBody","maxLength10","maxLengthCreator","reduxForm","form","dispatch","useAppDispatch","handleSubmit","Field","component","TextArea","placeholder","validate","required","onKeyDown","keyCode","addPostAC","MyPostsContainer","connect","newPostText","idUser","Profile","Preloader","ProfileContainer","userId","match","params","authorizedUserId","history","setUserProfileThunk","getStatus","refreshProfile","compose","auth","isAuth","withRouter","withAuthRedirect","mapStateToPropsForRedirect","Component","getAuthUserData","logout","restProps","to"],"sourceRoot":""}