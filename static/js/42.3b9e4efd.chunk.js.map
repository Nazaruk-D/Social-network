{"version":3,"file":"static/js/42.3b9e4efd.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.scss?d037","webpack://samurai-way/./src/components/Dialogs/DialogsComponents/Message/Message.module.scss?8212","components/Dialogs/DialogsComponents/Message/Message.tsx","webpack://samurai-way/./src/components/Dialogs/DialogsComponents/FriendsList/FriendsList.module.scss?e3e2","components/Dialogs/DialogsComponents/FriendsList/FriendsList.tsx","components/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogsContainer\":\"Dialogs_dialogsContainer__utsXu\",\"friendsList\":\"Dialogs_friendsList__-PNM8\",\"title\":\"Dialogs_title__NhgXm\",\"messages\":\"Dialogs_messages__UmrN6\",\"textField\":\"Dialogs_textField__escT9\",\"buttonBlock\":\"Dialogs_buttonBlock__-Rngu\"};","// extracted by mini-css-extract-plugin\nexport default {\"messageContainer\":\"Message_messageContainer__RgjE-\",\"myMessageBlock\":\"Message_myMessageBlock__F329T\",\"myMessage\":\"Message_myMessage__4rjng\",\"data\":\"Message_data__vD1dv\",\"delete\":\"Message_delete__pOkaF\",\"friendsMessageBlock\":\"Message_friendsMessageBlock__NaEXT\",\"friendsMessage\":\"Message_friendsMessage__if86N\"};","import React, {useState} from \"react\";\r\nimport s from \"./Message.module.scss\"\r\nimport {Message} from \"../../../../redux/dialogs-reducer\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport {MdDeleteForever} from \"react-icons/md\";\r\n\r\n\r\ntype MessageProps = {\r\n    messages: Array<Message>\r\n    deleteMessage: (friendsId: string, messageId: string) => void\r\n}\r\n\r\nexport const Messages: React.FC<MessageProps> = (props) => {\r\n    let {userId} = useParams<{ userId: string }>()\r\n\r\n    //удалить или пофиксить\r\n    const [visible, setVisible] = useState(true)\r\n\r\n    const deleteMessage = (friendsId: string, messageId: string) => {\r\n        props.deleteMessage(friendsId, messageId)\r\n    }\r\n\r\n    const deleteButton = visible ? {opacity: \"100%\"} : {opacity: \"0%\"}\r\n\r\n    return (\r\n        <div className={s.messageContainer}>\r\n            {props.messages.map((m) => m.myPost\r\n                ? <div className={s.myMessageBlock} key={m.idMessage} >\r\n                    <div className={s.myMessage}\r\n                         // onMouseEnter={() => setVisible(true)} onMouseLeave={() => setVisible(false)}\r\n                    >\r\n                        <div>{m.message}</div>\r\n                        <div className={s.data}>{m.dataMessage}</div>\r\n                    </div>\r\n                    <div className={s.delete} onClick={() => deleteMessage(userId, m.idMessage)} style={ deleteButton}>\r\n                        <MdDeleteForever style={{fontSize: \"20px\"}}/>\r\n                    </div>\r\n                </div>\r\n                : <div className={s.friendsMessageBlock} key={m.idMessage}>\r\n                    <div className={s.friendsMessage}>\r\n                        <div>{m.message}</div>\r\n                        <div className={s.data}>{m.dataMessage}</div>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"friendBlock\":\"FriendsList_friendBlock__VubZB\",\"friend\":\"FriendsList_friend__H1RoS\",\"ava\":\"FriendsList_ava__qeGjP\",\"nameTd\":\"FriendsList_nameTd__POguG\"};","import React from \"react\";\r\nimport s from \"./FriendsList.module.scss\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype FriendsListProps = {\r\n    name: string\r\n    id: string\r\n    ava: string\r\n}\r\n\r\nexport const FriendsList: React.FC<FriendsListProps> = (props) => {\r\n    return (\r\n        <div className={s.friendBlock}>\r\n                <NavLink to={\"/dialogs/\" + props.id} className={s.friend}>\r\n                    <img src={props.ava} className={s.ava} alt=\"\"/>\r\n                    <div className={s.nameTd}>{props.name}</div>\r\n                </NavLink>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport s from './Dialogs.module.scss'\r\nimport {DialogsDataType, InitialStateType} from \"../../redux/dialogs-reducer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {TextArea} from \"../common/FormsControl/FormsControl\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport {Messages} from \"./DialogsComponents/Message/Message\";\r\nimport {FriendsList} from \"./DialogsComponents/FriendsList/FriendsList\";\r\n\r\nexport type DialogTypeProps = {\r\n    SendMessage: (values: string, userId: string) => void\r\n    DeleteMessage: (friendsId: string, messageId: string) => void\r\n    updateNewMessageBody: (body: any) => void\r\n    dialogs: InitialStateType\r\n    newMessageBody: string\r\n    isAuth: boolean\r\n}\r\n\r\n\r\nexport const Dialogs: React.FC<DialogTypeProps> = (props) => {\r\n\r\n    let {userId} = useParams<{ userId: string }>()\r\n\r\n    const addNewMessage = (values: AddMessageFormType) => {\r\n        props.SendMessage(values.newMessageBody, userId)\r\n    }\r\n\r\n    const deleteMessage = (friendsId: string, messageId: string) => {\r\n        props.DeleteMessage(friendsId, messageId)\r\n    }\r\n\r\n    let dialogElements = props.dialogs.map((dialog: DialogsDataType) => <div key={dialog.id}><FriendsList\r\n        name={dialog.name}\r\n        id={dialog.id}\r\n        ava={dialog.ava}/>\r\n    </div>)\r\n\r\n    let messages = props.dialogs.map((dialog: DialogsDataType, index) => dialog.id === userId\r\n        ? <div key={index}><Messages messages={dialog.messages} deleteMessage={deleteMessage}/></div>\r\n        : null\r\n    )\r\n    // if (!props.isAuth) return <Redirect to={\"/login\"}/>\r\n\r\n\r\n    return (\r\n        <div className={s.dialogsContainer}>\r\n            <div className={s.friendsList}>\r\n                <div className={s.title}>Friends list</div>\r\n                {dialogElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>\r\n                    {messages}\r\n                </div>\r\n                {userId && <AddMessageFormRedux onSubmit={addNewMessage}/>}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport type AddMessageFormType = {\r\n    newMessageBody: string\r\n}\r\n\r\nconst maxLength50 = maxLengthCreator(50)\r\n\r\nexport const AddMessageForm: React.FC<InjectedFormProps<AddMessageFormType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={TextArea} validate={[required, maxLength50]} name={\"newMessageBody\"}\r\n                       placeholder={\"Enter your message\"} className={s.textField}/>\r\n            </div>\r\n            <div className={s.buttonBlock}>\r\n                <button className={s.button}>Send message</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm<AddMessageFormType>({form: \"dialogAddMessageForm\"})(AddMessageForm)","import React, {ComponentType} from 'react';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\nimport {getAuthUserData, logout} from \"../redux/auth-reducer\";\r\n\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n    const RedirectComponent = (props: MapStatePropsType) => {\r\n        let {isAuth, ...restProps} = props;\r\n        if (!isAuth) return <Redirect to={\"/login\"}/>\r\n        return <Component {...restProps as T}/>\r\n    };\r\n\r\n\r\n    return connect(mapStateToPropsForRedirect, {getAuthUserData, logout})(RedirectComponent);\r\n}\r\n\r\n","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {deleteMessage, InitialStateType, sendMessageCreator} from \"../../redux/dialogs-reducer\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {Dialogs} from \"./Dialogs\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\n\r\n\r\ntype MapStatePropsType = {\r\n    dialogs: InitialStateType\r\n    // isAuth: boolean\r\n}\r\ntype MapDispatchPropType = {\r\n    SendMessage: (newMessageBody: string, userId: string) => void\r\n    DeleteMessage: (friendsId: string, messageId: string) => void\r\n}\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        dialogs: state.dialogs,\r\n        // isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropType => {\r\n    return {\r\n        SendMessage: (newMessageBody: string, userId: string) => {\r\n            dispatch(sendMessageCreator(newMessageBody, userId))\r\n        },\r\n        DeleteMessage: (friendsId: string, messageId: string) => {\r\n            dispatch(deleteMessage(friendsId, messageId))\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    withAuthRedirect,\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n)(Dialogs)\r\n\r\n"],"names":["Messages","props","userId","useParams","useState","visible","deleteButton","opacity","className","s","messages","map","m","myPost","message","dataMessage","onClick","friendsId","messageId","idMessage","deleteMessage","style","fontSize","FriendsList","to","id","src","ava","alt","name","maxLength50","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","TextArea","validate","required","placeholder","mapStateToPropsForRedirect","state","isAuth","auth","compose","Component","connect","getAuthUserData","logout","restProps","dialogs","dispatch","SendMessage","newMessageBody","sendMessageCreator","DeleteMessage","dialogElements","dialog","index","values"],"sourceRoot":""}