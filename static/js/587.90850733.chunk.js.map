{"version":3,"file":"static/js/587.90850733.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.scss?d037","webpack://samurai-way/./src/components/Dialogs/DialogsComponents/Message/Message.module.scss?8212","components/Dialogs/DialogsComponents/Message/Message.tsx","webpack://samurai-way/./src/components/Dialogs/DialogsComponents/FriendsList/FriendsList.module.scss?e3e2","components/Dialogs/DialogsComponents/FriendsList/FriendsList.tsx","components/Dialogs/DialogsContainer.tsx","components/Dialogs/Dialogs.tsx","webpack://samurai-way/./src/components/common/AddMessageForm/AddMessageForm.module.scss?998b","webpack://samurai-way/./src/components/common/BigButton/BigButton.module.scss?56ba","components/common/BigButton/BigButton.tsx","components/common/AddMessageForm/AddMessageForm.tsx","hoc/withAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogsContainer\":\"Dialogs_dialogsContainer__utsXu\",\"friendsList\":\"Dialogs_friendsList__-PNM8\",\"title\":\"Dialogs_title__NhgXm\",\"messages\":\"Dialogs_messages__UmrN6\"};","// extracted by mini-css-extract-plugin\nexport default {\"messageContainer\":\"Message_messageContainer__RgjE-\",\"myMessageBlock\":\"Message_myMessageBlock__F329T\",\"myMessage\":\"Message_myMessage__4rjng\",\"data\":\"Message_data__vD1dv\",\"delete\":\"Message_delete__pOkaF\",\"friendsMessageBlock\":\"Message_friendsMessageBlock__NaEXT\",\"friendsMessage\":\"Message_friendsMessage__if86N\"};","import React from \"react\";\r\nimport s from \"./Message.module.scss\"\r\nimport {Message} from \"../../../../redux/dialogs-reducer\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport {MdDeleteForever} from \"react-icons/md\";\r\n\r\n\r\ntype MessageProps = {\r\n    messages: Array<Message>\r\n    deleteMessage: (friendsId: string, messageId: string) => void\r\n}\r\n\r\nexport const Messages: React.FC<MessageProps> = (props) => {\r\n    const {userId} = useParams<{ userId: string }>()\r\n\r\n    const deleteMessage = (friendsId: string, messageId: string) => {\r\n        props.deleteMessage(friendsId, messageId)\r\n    }\r\n\r\n    return (\r\n        <div className={s.messageContainer}>\r\n            {userId !== \"all\"\r\n                ? props.messages.map((m) => m.myPost\r\n                    ? <div className={s.myMessageBlock} key={m.idMessage}>\r\n                        <div className={s.myMessage}\r\n                        >\r\n                            <div>{m.message}</div>\r\n                            <div className={s.data}>{m.dataMessage}</div>\r\n                        </div>\r\n                        <div className={s.delete} onClick={() => deleteMessage(userId, m.idMessage)}>\r\n                            <MdDeleteForever style={{fontSize: \"20px\"}}/>\r\n                        </div>\r\n                    </div>\r\n                    : <div className={s.friendsMessageBlock} key={m.idMessage}>\r\n                        <div className={s.friendsMessage}>\r\n                            <div>{m.message}</div>\r\n                            <div className={s.data}>{m.dataMessage}</div>\r\n                        </div>\r\n                    </div>\r\n                ).reverse()\r\n                : props.messages.map((m) => m.myPost\r\n                    ? <div className={s.myMessageBlock} key={m.idMessage}>\r\n                        <div className={s.myMessage}\r\n                        >\r\n                            <div>{m.message}</div>\r\n                            <div className={s.data}>{m.userName}</div>\r\n                        </div>\r\n                    </div>\r\n                    : <div className={s.friendsMessageBlock} key={m.idMessage}>\r\n                        <div className={s.friendsMessage}>\r\n                            <div>{m.message}</div>\r\n                            <div className={s.data}>{m.userName}</div>\r\n                        </div>\r\n                    </div>\r\n                ).reverse()\r\n            }\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"friendBlock\":\"FriendsList_friendBlock__VubZB\",\"friend\":\"FriendsList_friend__H1RoS\",\"ava\":\"FriendsList_ava__qeGjP\",\"nameTd\":\"FriendsList_nameTd__POguG\"};","import React from \"react\";\r\nimport s from \"./FriendsList.module.scss\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype FriendsListProps = {\r\n    name: string\r\n    id: string\r\n    ava: string\r\n}\r\n\r\nexport const FriendsList: React.FC<FriendsListProps> = ({name,ava,id}) => {\r\n    return (\r\n        <div className={s.friendBlock}>\r\n                <NavLink to={\"/dialogs/\" + id} className={s.friend}>\r\n                    <img src={ava} className={s.ava} alt=\"avatar\"/>\r\n                    <div className={s.nameTd}>{name}</div>\r\n                </NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/store\";\r\nimport {deleteMessage, InitialStateType, sendMessageCreator} from \"../../redux/dialogs-reducer\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {Dialogs} from \"./Dialogs\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\n\r\n\r\ntype MapStatePropsType = {\r\n    dialogs: InitialStateType\r\n}\r\ntype MapDispatchPropType = {\r\n    SendMessage: (newMessageBody: string, userId: string) => void\r\n    DeleteMessage: (friendsId: string, messageId: string) => void\r\n}\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        dialogs: state.dialogs,\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropType => {\r\n    return {\r\n        SendMessage: (newMessageBody: string, userId: string) => {\r\n            dispatch(sendMessageCreator(newMessageBody, userId))\r\n        },\r\n        DeleteMessage: (friendsId: string, messageId: string) => {\r\n            dispatch(deleteMessage(friendsId, messageId))\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    withAuthRedirect,\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n)(Dialogs)\r\n\r\n","import React, {useEffect, useState} from 'react';\r\nimport s from './Dialogs.module.scss'\r\nimport {DialogsDataType, fetchChat, InitialStateType} from \"../../redux/dialogs-reducer\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport {Messages} from \"./DialogsComponents/Message/Message\";\r\nimport {FriendsList} from \"./DialogsComponents/FriendsList/FriendsList\";\r\nimport {AddMessageForm} from \"../common/AddMessageForm/AddMessageForm\";\r\nimport {useAppDispatch} from \"../../redux/store\";\r\nimport {formatDate} from \"../../utils/formatDate/formatDate\";\r\n\r\nexport type DialogTypeProps = {\r\n    SendMessage: (values: string, userId: string) => void\r\n    DeleteMessage: (friendsId: string, messageId: string) => void\r\n    dialogs: InitialStateType\r\n}\r\n\r\n\r\nexport const Dialogs: React.FC<DialogTypeProps> = (props) => {\r\n    const {userId} = useParams<{ userId: string }>()\r\n\r\n\r\n\r\n    const addNewMessage = (values: string) => {\r\n        props.SendMessage(values, userId)\r\n    }\r\n\r\n    const deleteMessage = (friendsId: string, messageId: string) => {\r\n        props.DeleteMessage(friendsId, messageId)\r\n    }\r\n\r\n    const dialogElements = props.dialogs.map((dialog: DialogsDataType) => <div key={dialog.id}><FriendsList\r\n        name={dialog.name}\r\n        id={dialog.id}\r\n        ava={dialog.ava}/>\r\n    </div>)\r\n\r\n    const messages = props.dialogs.map((dialog: DialogsDataType, index) => dialog.id === userId\r\n        ? <div key={index}><Messages messages={dialog.messages} deleteMessage={deleteMessage}/></div>\r\n        : null\r\n    )\r\n\r\n\r\n    const dispatch = useAppDispatch()\r\n    const [ws, setWS] = useState<any>(null)\r\n    const [users, setUsers] = useState<any>([])\r\n\r\n    if (ws) {\r\n        ws.onmessage = (messageEvent: any) => {\r\n            debugger\r\n            let messages = JSON.parse(messageEvent.data)\r\n            setUsers([...users, ...messages])\r\n\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        let localWS = new WebSocket(\"wss://social-network.samuraijs.com/handlers/ChatHandler.ashx\")\r\n        setWS(localWS)\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        const newArr = users.map((u:any, index: number) => ({idMessage: index, userName: u.userName, message: u.message, dataMessage: formatDate(new Date()), myPost: u.userId === 25415}))\r\n        dispatch(fetchChat(newArr))\r\n    }, [users, dispatch])\r\n\r\n\r\n    const addNewMessageWS = (values: string) => {\r\n        ws.send(values)\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogsContainer}>\r\n            <div className={s.friendsList}>\r\n                <div className={s.title}>Friends list</div>\r\n                {dialogElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                {messages}\r\n                {userId === \"all\"\r\n                    ? <AddMessageForm onSubmit={addNewMessageWS}/>\r\n                    : <AddMessageForm onSubmit={addNewMessage}/>\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"addMessageFormBlock\":\"AddMessageForm_addMessageFormBlock__6flMP\",\"textField\":\"AddMessageForm_textField__D9IqF\"};","// extracted by mini-css-extract-plugin\nexport default {\"button\":\"BigButton_button__G3XYN\"};","import React, {FC} from 'react';\r\nimport s from \"./BigButton.module.scss\"\r\n\r\ntype ButtonPropsType = {\r\n    onClick: () => void\r\n}\r\n\r\nconst BigButton: FC<ButtonPropsType> = ({onClick}) => {\r\n    return (\r\n        <button className={s.button} onClick={onClick}>AddPost</button>\r\n    );\r\n};\r\n\r\nexport default BigButton;","import React, {useState} from \"react\";\r\nimport s from \"./AddMessageForm.module.scss\";\r\nimport BigButton from \"../BigButton/BigButton\";\r\n\r\n\r\nexport type AddMessageFormType = {\r\n    onSubmit: (values: string) => void\r\n}\r\n\r\n\r\nexport const AddMessageForm: React.FC<AddMessageFormType> = (props) => {\r\n    const [value, setValue] = useState(\"\")\r\n\r\n    const setValueHandler = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\r\n        setValue(e.currentTarget.value)\r\n    }\r\n\r\n    const sendMessage = () => {\r\n        if (value !== \"\") {\r\n            props.onSubmit(value)\r\n            setValue(\"\")\r\n        }\r\n    }\r\n\r\n    const onKeyDownHandler = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\r\n        if (e.key === \"Enter\") {\r\n            props.onSubmit(value)\r\n            setValue(\"\")\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={s.addMessageFormBlock}>\r\n            <textarea className={s.textField} placeholder={\"Enter your message\"} value={value}\r\n                      onChange={setValueHandler} onKeyDown={onKeyDownHandler}>\r\n            </textarea>\r\n            <BigButton onClick={sendMessage}/>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, {ComponentType} from 'react';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppStateType} from \"../redux/store\";\r\nimport {connect} from \"react-redux\";\r\nimport {getAuthUserData, logout} from \"../redux/auth-reducer\";\r\n\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n    const RedirectComponent = (props: MapStatePropsType) => {\r\n        let {isAuth, ...restProps} = props;\r\n        if (!isAuth) return <Redirect to={\"/login\"}/>\r\n        return <Component {...restProps as T}/>\r\n    };\r\n\r\n\r\n    return connect(mapStateToPropsForRedirect, {getAuthUserData, logout})(RedirectComponent);\r\n}\r\n\r\n"],"names":["Messages","props","userId","useParams","className","s","messages","map","m","myPost","message","dataMessage","onClick","friendsId","messageId","idMessage","deleteMessage","style","fontSize","reverse","userName","FriendsList","name","ava","id","to","src","alt","compose","withAuthRedirect","connect","state","dialogs","dispatch","SendMessage","newMessageBody","sendMessageCreator","DeleteMessage","dialogElements","dialog","index","useAppDispatch","useState","ws","setWS","users","setUsers","onmessage","messageEvent","JSON","parse","data","useEffect","localWS","WebSocket","newArr","u","formatDate","Date","fetchChat","AddMessageForm","onSubmit","values","send","value","setValue","placeholder","onChange","e","currentTarget","onKeyDown","key","mapStateToPropsForRedirect","isAuth","auth","Component","getAuthUserData","logout","restProps"],"sourceRoot":""}