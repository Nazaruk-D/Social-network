{"version":3,"file":"static/js/608.a028d2c4.chunk.js","mappings":"kNACA,EAAmC,kC,mBCAnC,EAAuC,0CAAvC,EAAoG,sCAApG,EAAwJ,iCAAxJ,EAAsM,gCAAtM,EAA+O,4BAA/O,EAAyR,iCAAzR,EAA6U,sCAA7U,EAAiY,iCAAjY,EAAgb,iCAAhb,EAAoe,sCAApe,EAAyhB,kCAAzhB,EAA2kB,mCAA3kB,EAAgoB,qCAAhoB,EAAyrB,uC,SCMnrBA,EAAAA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GAAAA,SAAAA,IAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,KAAAA,GAAAA,IAAAA,IAAAA,EAAAA,UAAAA,OAAAA,EAAAA,IAAAA,MAAAA,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,IAAAA,EAAAA,GAAAA,UAAAA,GAwBD,OAxBCA,EAAAA,EAAAA,KAAAA,MAAAA,EAAAA,CAAAA,MAAAA,OAAAA,KAEFC,MAAQ,CACJC,UAAU,EACVC,OAAQ,EAAKC,MAAMD,QAFf,EAKRE,kBAAoB,WAChB,EAAKC,SAAS,CACVJ,UAAU,KAEjB,EAEDK,oBAAsB,WAClB,EAAKD,SAAS,CACVJ,UAAU,IAEd,EAAKE,MAAMI,aAAa,EAAKP,MAAME,SACtC,EAEDM,eAAiB,SAACC,GACd,EAAKJ,SAAS,CACVH,OAAQO,EAAEC,cAAcC,SAE/B,EAuBA,OAvBA,0CAED,SAAmBC,EAAwCC,EAAyBC,GAC3EF,EAAUV,SAAWa,KAAKZ,MAAMD,QAAYa,KAAKV,SAAS,CAAEH,OAAQa,KAAKZ,MAAMD,WACvF,oBAED,WACI,OACI,4BACMa,KAAKf,MAAMC,WACT,0BACI,iBACIe,cAAeD,KAAKX,kBADxB,SAC4CW,KAAKZ,MAAMD,OAASa,KAAKZ,MAAMD,OAAS,4FAG3Fa,KAAKf,MAAMC,WACR,0BACI,kBAAOgB,SAAUF,KAAKP,eAAgBG,MAAOI,KAAKf,MAAME,OACjDgB,OAAQH,KAAKT,oBAAqBa,WAAS,aAKrE,EA/CCpB,CAAsBqB,EAAAA,WAkD5B,I,UCjDaC,EAAgD,SAAC,GAAe,IAAdC,EAAa,EAAbA,QAC3D,OACI,6BACI,4BACI,qCADJ,MACuBC,EAAAA,EAAAA,IAAY,YAAa,WAAY,GAAIC,EAAAA,QAEhE,4BACI,6CADJ,KAC+BF,EAASG,eAAiB,MAAQ,QAEhEH,EAASG,iBACN,4BACI,kDADJ,KACoCH,EAASI,8BAGjD,4BACI,oCADJ,KACsBJ,EAASK,YAE/B,oBAKA,mBAAQC,QAAS,aAAjB,sB,yFCvBCC,EAAc,WACvB,IAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,UAAS,CAEtBC,OAAQ,SAQNC,EAAW,mCAAE,WAAMC,GAAN,2FACQC,MAAMD,GADd,cACTE,EADS,gBAGIA,EAASC,OAHb,OAGTA,EAHS,OAITC,EAAO,IAAIC,KAAK,CAACF,GAAO,YAAa,CAACG,KAAMH,EAAKG,OACvDC,QAAQC,IAAIJ,GACZV,GAASe,EAAAA,EAAAA,IAAUL,IANJ,2CAAF,sDAQjB,OACI,0BACI,SAAC,EAAAM,aAAD,CAAcd,SAAUA,EACVe,QAAS,CAACC,OAAO,GACjBC,WAAY,SAAAC,GAAK,OAjBvB,SAACA,GACbf,EAAYe,EAAM,GAAGC,SAgBkBC,CAAQF,IAF3C,SAGK,gBAAEtB,EAAF,EAAEA,QAAF,OACG,mBAAQA,QAASA,EAASyB,MAAO,CAACC,UAAW,QAA7C,oC,8CCbPC,EAAyC,SAAC,GAA6C,IAA5CjC,EAA2C,EAA3CA,QAASkC,EAAkC,EAAlCA,QAASX,EAAyB,EAAzBA,UAAc1C,GAAW,YAE/F,GAAgCsD,EAAAA,EAAAA,WAAS,GAAzC,eAAOxD,EAAP,KAAiByD,EAAjB,KASA,OACI,gBAAKC,UAAWC,EAAhB,UACI,iBAAKD,UAAWC,EAAhB,WAEI,iBAAKD,UAAWC,EAAhB,WAEI,iBAAKD,UAAWC,EAAhB,WACI,gBAAKC,IAA+B,QAAnB,OAAPvC,QAAO,IAAPA,OAAA,EAAAA,EAASwC,OAAOC,OAAhB,OAAiCzC,QAAjC,IAAiCA,OAAjC,EAAiCA,EAASwC,OAAOC,OAAQC,EAAAA,EAAAA,KAAyBL,UAAWC,KACvG,gBAAKD,UAAWC,EAAhB,UACI,SAAC/B,EAAD,SAIP2B,IACG,mBAAOS,QAAS,WAAhB,WACI,iBAAKN,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,oCACA,gBAAKC,IAAKK,EAAgBC,IAAI,cAAcR,UAAWC,QAE3D,kBAAOQ,GAAI,WAAY1B,KAAK,OAAOzB,SA1B1B,SAACR,GAC1BA,EAAE4D,OAAOnB,MAAO,KAChBL,EAAUpC,EAAE4D,OAAOnB,MAAO,IAC1BP,QAAQC,IAAInC,EAAE4D,OAAOnB,MAAO,MAwBLS,UAAWC,WAI9B,iBAAKD,UAAWC,EAAhB,WACI,iBAAKD,UAAWC,EAAhB,WACI,sCACA,SAAC,EAAD,CAAe1D,OAAQC,EAAMD,OAAQK,aAAcJ,EAAMI,kBAG5DN,GACK,gBAAK0D,UAAWC,EAAhB,UACE,SAACvC,EAAD,CAAiBC,QAASA,OAE5B,gBAAKqC,UAAWC,EAAhB,UACE,SAACU,EAAD,CAAaC,aAAc,kBAAMb,GAAY,IAAOpC,QAASA,EAASkC,QAASA,eAerGc,EAAyC,SAAC,GAAsC,IAArChD,EAAoC,EAApCA,QAASkC,EAA2B,EAA3BA,QAASe,EAAkB,EAAlBA,aAE/D,OACI,4BACI,4BACI,qCADJ,KACuBjD,EAASkD,aAEhC,4BACI,6CADJ,KAC+BlD,EAASG,eAAiB,MAAQ,QAEhEH,EAASG,iBACN,4BACI,kDADJ,KACoCH,EAASI,8BAGjD,4BACI,oCADJ,KACsBJ,EAASK,YAE/B,mBAKC6B,IAAW,mBAAQ5B,QAAS2C,EAAcZ,UAAWC,EAA1C,sBCvGxB,EAAkC,iCAAlC,EAA6E,yBAA7E,EAAsH,+BAAtH,EAAgK,0BAAhK,EAA0M,+BAA1M,EAAwP,8BAAxP,EAA6R,sBAA7R,EAAqU,iCAArU,EAAmX,4BCAnX,EAAgC,4BAAhC,EAAuE,uBAAvE,GAAoG,kBAApG,GAAkI,wBAAlI,GAAiK,mBAAjK,GAA8L,sBAA9L,GAA2N,mB,WCc9Ma,GAAgC,SAACtE,GAG1C,OACI,iBAAKwD,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,UAA4B,gBAAKC,IAAK1D,EAAMuE,IAAKP,IAAI,SAASR,UAAWC,QACzE,iBAAKD,UAAWC,GAAhB,WACI,gBAAKD,UAAWC,GAAhB,SAAyBzD,EAAMwE,QAC/B,gBAAKhB,UAAWC,GAAhB,SAA4BzD,EAAMyE,WAEtC,gBAAKf,IAAKgB,GAASV,IAAI,UAAUR,UAAWC,GAAQhC,QAAS,kBAAIzB,EAAM2E,QAAQ3E,EAAM4E,EAAEX,OAN3F,IAMmGjE,EAAM6E,e,gCCPpGC,GAAoC7D,EAAAA,MAAW,SAACjB,GAOzD,IALA,OAAwBsD,EAAAA,EAAAA,UAAS,GAAjC,eAAOyB,EAAP,KAAaC,EAAb,KACMC,EAAajF,EAAMH,MAAMqF,SACzBC,EAAUC,KAAKC,KAAKJ,EAAWK,OAAS,GACxCC,EAAa,GAEVC,EAAI,EAAGA,EAAIL,EAAU,EAAGK,IAC7BD,EAAWE,KAAKD,GAEpB,IAUME,EAVM,SAACX,GACT,GAAa,IAATA,EACA,OAAOE,EAAWU,MAAM,EAAG,GACxB,GAAIZ,EAAO,EAAG,CACjB,IAAMa,EAAuB,EAAPb,EAAY,EAC5Bc,EAAoB,EAAPd,EACnB,OAAOE,EAAWU,MAAMC,EAAcC,IAIzBC,CAAIf,GAErBgB,EAAgBL,EAAcM,KAAI,SAAApB,GAAC,OAAI,0BAAgB,SAACN,GAAD,CAAMC,IAAKK,EAAEqB,OACPzB,KAAMI,EAAEJ,KACRC,KAAMG,EAAEsB,QACRrB,WAAYD,EAAEC,WACdsB,WAAY,OACZxB,QAAS3E,EAAM2E,QACfC,EAAGA,KANfA,EAAEX,OAUnDmC,EAAab,EAAWS,KAAI,SAACpB,EAAGyB,GAChC,IAAMC,EAAWvB,IAASH,EAAI,CAAC2B,MAAO,qBAAuB,GAC7D,OAAO,iBAAkB/C,UAAWC,EAAcP,MAAOoD,EAAU7E,QAAS,kBAAMuD,EAAQJ,IAAnF,SAAwFA,GAA7EyB,MAOtB,OACI,iBAAK7C,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,UACI,SAAC+C,GAAD,CAAqBC,SAPjB,SAACC,GACb1G,EAAM2G,QAAQD,EAAOE,sBAQjB,gBAAKpD,UAAWC,EAAhB,UACI,gBAAKD,UAAWC,EAAhB,SACKsC,OAGT,gBAAKvC,UAAWC,EAAhB,SACK2C,UAUXS,IAAcC,EAAAA,GAAAA,GAAiB,IAqB/BN,IAAsBO,EAAAA,GAAAA,GAA8B,CAACC,KAAM,yBAArCD,EAlB4C,SAAC/G,GACrE,IAAM2B,GAAWC,EAAAA,EAAAA,MAOjB,OACI,kBAAM6E,SAAUzG,EAAMiH,aAAczD,UAAWC,EAA/C,WACI,SAACyD,GAAA,EAAD,CAAOC,UAAWC,EAAAA,GAAU5C,KAAM,iBAAkB6C,YAAa,qBAC1D7D,UAAWC,EAAY6D,SAAU,CAACC,GAAAA,EAAUV,IAAcW,UAThD,SAAClH,GACJ,KAAdA,EAAEmH,SACF9F,GAAS+F,EAAAA,EAAAA,IAAUpH,EAAEC,cAAcC,YAQnC,mBAAQgD,UAAWC,EAAnB,2B,WC9DCkE,IAAmBC,EAAAA,GAAAA,KAlBV,SAAC/H,GACnB,MAAO,CACHA,MAAOA,EAAMsB,YAII,SAACQ,GACtB,MAAO,CACHgF,QAAS,SAACkB,GACNlG,GAAS+F,EAAAA,EAAAA,IAAUG,KAEvBlD,QAAS,SAACmD,GACNnG,GAASgD,EAAAA,EAAAA,IAAQmD,QAMGF,CAA6C9C,I,WChBhEiD,GAAsC,SAAC/H,GAChD,OAAKA,EAAMmB,SAKP,iBAAKqC,UAAWC,EAAhB,WACI,SAACL,EAAD,CACIjC,QAASnB,EAAMmB,QACfpB,OAAQC,EAAMD,OACdK,aAAcJ,EAAMI,aACpBiD,QAASrD,EAAMqD,QACfX,UAAW1C,EAAM0C,aAGrB,SAACiF,GAAD,QAZG,SAACK,GAAA,EAAD,K,sBCUTC,GAAAA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GAAAA,SAAAA,IAAAA,OAAAA,EAAAA,EAAAA,GAAAA,KAAAA,GAAAA,EAAAA,MAAAA,KAAAA,WAoCD,OApCCA,EAAAA,EAAAA,GAAAA,EAAAA,CAAAA,CAAAA,IAAAA,iBAAAA,MAEF,WACI,IAAIC,EAAStH,KAAKZ,MAAMmI,MAAMC,OAAOF,OACjCA,IAEAA,EAAStH,KAAKZ,MAAMqI,mBAEhBzH,KAAKZ,MAAMsI,QAAQ7C,KAAK,UAGhC7E,KAAKZ,MAAMuI,oBAAoBL,GAC/BtH,KAAKZ,MAAMwI,UAAUN,KACxB,+BAED,WACItH,KAAK6H,mBACR,gCAED,SAAmBhI,EAAgDC,EAAyBC,GACrFC,KAAKZ,MAAMmI,MAAMC,OAAOF,SAAWzH,EAAU0H,MAAMC,OAAOF,QACzDtH,KAAK6H,mBACZ,oBAED,WAEI,OACI,SAACV,GAAD,CACI5G,QAASP,KAAKZ,MAAMmB,QACpBpB,OAAQa,KAAKZ,MAAMD,OACnBK,aAAcQ,KAAKZ,MAAMI,aACzBiD,SAAUzC,KAAKZ,MAAMmI,MAAMC,OAAOF,OAClCxF,UAAW9B,KAAKZ,MAAM0C,gBAIjC,EApCCuF,CAAyBhH,EAAAA,WAsD/B,IAAeyH,EAAAA,GAAAA,KACXd,EAAAA,GAAAA,KAbkB,SAAC/H,GACnB,MAAO,CACHsB,QAAStB,EAAMsB,QAAQA,QACvBpB,OAAQF,EAAMsB,QAAQpB,OACtBsI,iBAAkBxI,EAAM8I,KAAK1E,GAC7B2E,OAAQ/I,EAAM8I,KAAKC,UAQE,CAACL,oBAAAA,EAAAA,GAAqBC,UAAAA,EAAAA,GAAWpI,aAAAA,EAAAA,GAAcsC,UAAAA,EAAAA,KACxEmG,GAAAA,GAFJ,CAIEZ,K","sources":["webpack://samurai-way/./src/components/Profile/Profile.module.scss?4008","webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileInfo.module.scss?e49f","components/Profile/ProfileInfo/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/common/UploadPhoto/UploadPhoto.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/Myposts/MyPosts.module.scss?f352","webpack://samurai-way/./src/components/Profile/Myposts/Posts/Post.module.scss?d046","components/Profile/Myposts/Posts/Post.tsx","components/Profile/Myposts/MyPosts.tsx","components/Profile/Myposts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"profileContainer\":\"Profile_profileContainer__GK-ND\"};","// extracted by mini-css-extract-plugin\nexport default {\"profileInfoContainer\":\"ProfileInfo_profileInfoContainer__9v5Ik\",\"profileInfoBlock\":\"ProfileInfo_profileInfoBlock__goYeC\",\"avatarBlock\":\"ProfileInfo_avatarBlock__21pru\",\"mainAvatar\":\"ProfileInfo_mainAvatar__jA7Gf\",\"avatar\":\"ProfileInfo_avatar__KQ0zh\",\"updatePhoto\":\"ProfileInfo_updatePhoto__ASuP0\",\"uploadPhotoBlock\":\"ProfileInfo_uploadPhotoBlock__usFJj\",\"supportText\":\"ProfileInfo_supportText__YZUeA\",\"uploadPhoto\":\"ProfileInfo_uploadPhoto__1VHeP\",\"inputUploadPhoto\":\"ProfileInfo_inputUploadPhoto__UajYh\",\"profileBlock\":\"ProfileInfo_profileBlock__5piPY\",\"profileStatus\":\"ProfileInfo_profileStatus__jnFRU\",\"profileDataForm\":\"ProfileInfo_profileDataForm__O8l5p\",\"buttonEditProfile\":\"ProfileInfo_buttonEditProfile__2LsHa\"};","import React from 'react';\r\n\r\ntype ProfileStatusType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nclass ProfileStatus extends React.Component<ProfileStatusType> {\r\n\r\n    state = {\r\n        editMode: false,\r\n        status: this.props.status\r\n    }\r\n\r\n    activateEditeMode = () => {\r\n        this.setState({\r\n            editMode: true\r\n        })\r\n    }\r\n\r\n    deactivateEditeMode = () => {\r\n        this.setState({\r\n            editMode: false\r\n        })\r\n        this.props.updateStatus(this.state.status)\r\n    }\r\n\r\n    onStatusChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({\r\n            status: e.currentTarget.value\r\n        })\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<ProfileStatusType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        if ( prevProps.status !== this.props.status ) {  this.setState({ status: this.props.status })  }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {!this.state.editMode &&\r\n                    <div>\r\n                        <span\r\n                            onDoubleClick={this.activateEditeMode}>{this.props.status ? this.props.status : \"изменить статус\"}</span>\r\n                    </div>\r\n                }\r\n                {this.state.editMode &&\r\n                    <div>\r\n                        <input onChange={this.onStatusChange} value={this.state.status}\r\n                               onBlur={this.deactivateEditeMode} autoFocus></input>\r\n                    </div>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ProfileStatus;","import React, {FC} from 'react';\r\nimport {createField, Input} from \"../../common/FormsControl/FormsControl\";\r\n\r\ntype ProfileDataFormPropsType = {\r\n    // profile: ProfileType\r\n    profile: any\r\n}\r\n\r\nexport const ProfileDataForm: FC<ProfileDataFormPropsType> = ({profile}) => {\r\n    return (\r\n        <form>\r\n            <div>\r\n                <b>Full Name</b>: {createField(\"Full name\", \"fullname\", [], Input)}\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job</b>: {profile!.lookingForAJob ? \"yes\" : \"no\"}\r\n            </div>\r\n            {profile!.lookingForAJob &&\r\n                <div>\r\n                    <b>My professional skills</b>: {profile!.lookingForAJobDescription}\r\n                </div>\r\n            }\r\n            <div>\r\n                <b>About me</b>: {profile!.aboutMe}\r\n            </div>\r\n            <div>\r\n                {/*<b>Contacts</b>: {Object.keys(profile!.contacts).map((key) => {*/}\r\n                {/*return <Contact key={key} contactTitle={key} contactValue={profile!.contacts[key]} />*/}\r\n                {/*})}*/}\r\n            </div>\r\n            <button onClick={()=>{}}>save</button>\r\n        </form>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport 'antd/dist/antd.css';\r\nimport { Uploader } from \"uploader\";\r\nimport { UploadButton } from \"react-uploader\";\r\nimport {useAppDispatch} from \"../../../redux/redux-store\";\r\nimport {savePhoto} from \"../../../redux/profile-reducer\";\r\n\r\nexport const UploadPhoto = () => {\r\n    const dispatch = useAppDispatch()\r\n    const uploader = Uploader({\r\n        // Get production API keys from Upload.io\r\n        apiKey: \"free\"\r\n    });\r\n\r\n    const handler = (files: any) => {\r\n        urlToObject(files[0].fileUrl)\r\n    }\r\n\r\n\r\n    const urlToObject= async(image: string)=> {\r\n        const response = await fetch(image);\r\n        // here image is url/location of image\r\n        const blob = await response.blob();\r\n        const file = new File([blob], 'image.jpg', {type: blob.type});\r\n        console.log(file)\r\n        dispatch(savePhoto(file))\r\n    }\r\n    return (\r\n        <div>\r\n            <UploadButton uploader={uploader}\r\n                          options={{multi: false}}\r\n                          onComplete={files => handler(files)}>\r\n                {({onClick}) =>\r\n                    <button onClick={onClick} style={{marginTop: \"75px\"}}>\r\n                        Upload a file...\r\n                    </button>\r\n                }\r\n            </UploadButton>\r\n        </div>\r\n    );\r\n};\r\n","import React, {FC, useState} from \"react\";\r\nimport s from \"./ProfileInfo.module.scss\";\r\nimport {ProfileType} from \"../../../redux/profile-reducer\";\r\nimport ProfileStatus from './ProfileStatus'\r\nimport userPhoto from '../../../assets/images/user.png'\r\nimport {ProfileDataForm} from \"./ProfileDataForm\";\r\nimport uploadPhotoPNG from '../../../assets/png/uploadPhoto.png'\r\nimport {UploadPhoto} from \"../../common/UploadPhoto/UploadPhoto\";\r\nimport {getRandomArrayElement} from \"../../Users/getRandomArrayElement\";\r\n\r\n\r\ntype ProfileInfoType = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: any\r\n    // photo: string | null\r\n}\r\n\r\nexport const ProfileInfo: React.FC<ProfileInfoType> = ({profile, isOwner, savePhoto, ...props}) => {\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n\r\n    const mainPhotoSelectedHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files![0]) {\r\n            savePhoto(e.target.files![0])\r\n            console.log(e.target.files![0])\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={s.profileInfoContainer}>\r\n            <div className={s.profileInfoBlock}>\r\n\r\n                <div className={s.avatarBlock}>\r\n                    {/*<img src={u.photos.small != null ? u.photos.small : getRandomArrayElement()} className={s.avatarImg}/>*/}\r\n                    <div className={s.mainAvatar}>\r\n                        <img src={profile?.photos.large !== null ? profile?.photos.large : getRandomArrayElement()} className={s.avatar}/>\r\n                        <div className={s.updatePhoto}>\r\n                            <UploadPhoto/>\r\n                        </div>\r\n                    </div>\r\n\r\n                    {isOwner &&\r\n                        <label htmlFor={\"inputTag\"}>\r\n                            <div className={s.uploadPhotoBlock}>\r\n                                <div className={s.supportText}>Click to upload photo</div>\r\n                                <img src={uploadPhotoPNG} alt=\"uploadPhoto\" className={s.uploadPhoto}/>\r\n                            </div>\r\n                            <input id={\"inputTag\"} type=\"file\" onChange={mainPhotoSelectedHandler}\r\n                                   className={s.inputUploadPhoto}/>\r\n                        </label>}\r\n                </div>\r\n\r\n                <div className={s.profileBlock}>\r\n                    <div className={s.profileStatus}>\r\n                        <div>Status:</div>\r\n                        <ProfileStatus status={props.status} updateStatus={props.updateStatus}/>\r\n                    </div>\r\n\r\n                    {editMode\r\n                        ? <div className={s.profileDataForm}>\r\n                            <ProfileDataForm profile={profile}/>\r\n                        </div>\r\n                        : <div className={s.profileDataForm}>\r\n                            <ProfileData goToEditMode={() => setEditMode(true)} profile={profile} isOwner={isOwner}/>\r\n                        </div>\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype ProfileBlockPropsType = {\r\n    profile: ProfileType\r\n    isOwner?: boolean\r\n    goToEditMode?: () => void\r\n}\r\n\r\nconst ProfileData: FC<ProfileBlockPropsType> = ({profile, isOwner, goToEditMode}) => {\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <b>Full Name</b>: {profile!.fullName}\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job</b>: {profile!.lookingForAJob ? \"yes\" : \"no\"}\r\n            </div>\r\n            {profile!.lookingForAJob &&\r\n                <div>\r\n                    <b>My professional skills</b>: {profile!.lookingForAJobDescription}\r\n                </div>\r\n            }\r\n            <div>\r\n                <b>About me</b>: {profile!.aboutMe}\r\n            </div>\r\n            <div>\r\n                {/*<b>Contacts</b>: {Object.keys(profile!.contacts).map((key) => {*/}\r\n                {/*return <Contact key={key} contactTitle={key} contactValue={profile!.contacts[key]} />*/}\r\n                {/*})}*/}\r\n            </div>\r\n            {isOwner && <button onClick={goToEditMode} className={s.buttonEditProfile}>edit</button>}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Contact = (contactTitle: string, contactValue: string) => {\r\n    return <div><b>{contactTitle}</b>: {contactValue}</div>\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"myPostContainer\":\"MyPosts_myPostContainer__3vuVZ\",\"addForm\":\"MyPosts_addForm__CwT0C\",\"formContainer\":\"MyPosts_formContainer__Vqz3M\",\"textArea\":\"MyPosts_textArea__M7vK7\",\"addPostButton\":\"MyPosts_addPostButton__Lcz4a\",\"messageBlock\":\"MyPosts_messageBlock__4JDWJ\",\"item\":\"MyPosts_item__ydHH-\",\"paginationBlock\":\"MyPosts_paginationBlock__3AASw\",\"pagination\":\"MyPosts_pagination__NnNu+\"};","// extracted by mini-css-extract-plugin\nexport default {\"postContainer\":\"Post_postContainer__jxQ-s\",\"avaBlock\":\"Post_avaBlock__8rQEc\",\"ava\":\"Post_ava__wjWVP\",\"textBlock\":\"Post_textBlock__UkJVG\",\"name\":\"Post_name__Xr5Bj\",\"message\":\"Post_message__Qy6Nf\",\"like\":\"Post_like__wVdVD\"};","import React from \"react\";\r\nimport s from \"./Post.module.scss\";\r\nimport likePNG from '../../../../assets/png/like.png'\r\nimport {postDataPropsType} from \"../../../../redux/profile-reducer\";\r\n\r\ntype DataTypeProps = {\r\n    post: string\r\n    name: string\r\n    img: string\r\n    buttonName: string\r\n    likesCount: number\r\n    p: postDataPropsType\r\n    addLike: (idUser: string) => void\r\n}\r\n\r\nexport const Post: React.FC<DataTypeProps> = (props) => {\r\n\r\n\r\n    return (\r\n        <div className={s.postContainer}>\r\n            <div className={s.avaBlock}><img src={props.img} alt=\"avatar\" className={s.ava}/></div>\r\n            <div className={s.textBlock}>\r\n                <div className={s.name}>{props.name}</div>\r\n                <div className={s.message}>{props.post}</div>\r\n            </div>\r\n            <img src={likePNG} alt=\"likePNG\" className={s.like} onClick={()=>props.addLike(props.p.id)}/> {props.likesCount}\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n","import React, {useState} from \"react\";\r\nimport s from \"./MyPosts.module.scss\";\r\nimport {Post} from \"./Posts/Post\";\r\nimport {addPostAC, profilePagePropsType} from \"../../../redux/profile-reducer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {AddMessageFormType} from \"../../Dialogs/Dialogs\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {TextArea} from \"../../common/FormsControl/FormsControl\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {useAppDispatch} from \"../../../redux/redux-store\";\r\n\r\n\r\ntype MyPostPropType = {\r\n    state: profilePagePropsType\r\n    addPost: (values: string) => void\r\n    addLike: (idUser: string) => void\r\n}\r\n\r\nexport const MyPosts: React.FC<MyPostPropType> = React.memo((props) => {\r\n\r\n    const [page, setPage] = useState(1)\r\n    const postsArray = props.state.postData\r\n    const allPage = Math.ceil(postsArray.length / 5)\r\n    const pageVision = []\r\n\r\n    for (let i = 1; i < allPage + 1; i++) {\r\n        pageVision.push(i)\r\n    }\r\n    const foo = (page: number) => {\r\n        if (page === 1) {\r\n            return postsArray.slice(0, 5)\r\n        } else if (page > 1) {\r\n            const startMessage = (page * 5) - 5\r\n            const endMessage = page * 5\r\n            return postsArray.slice(startMessage, endMessage)\r\n        }\r\n    }\r\n\r\n    const portionArray = foo(page)\r\n\r\n    let postsElements = portionArray!.map(p => <div key={p.id}><Post img={p.avatar}\r\n                                                                     name={p.name}\r\n                                                                     post={p.message}\r\n                                                                     likesCount={p.likesCount}\r\n                                                                     buttonName={\"Like\"}\r\n                                                                     addLike={props.addLike}\r\n                                                                     p={p}\r\n    />\r\n    </div>)\r\n\r\n    let pagination = pageVision.map((p, index) => {\r\n        const isActive = page === p ? {color: \"rgb(211, 181, 91)\"} : {}\r\n        return <span key={index} className={s.pagination} style={isActive} onClick={() => setPage(p)}>{p}</span>\r\n    })\r\n\r\n    const addPost = (values: AddMessageFormType) => {\r\n        props.addPost(values.newMessageBody)\r\n    }\r\n\r\n    return (\r\n        <div className={s.myPostContainer}>\r\n            <div className={s.addForm}>\r\n                <AddNewPostFormRedux onSubmit={addPost}/>\r\n            </div>\r\n            <div className={s.messageBlock}>\r\n                <div className={s.item}>\r\n                    {postsElements}\r\n                </div>\r\n            </div>\r\n            <div className={s.paginationBlock}>\r\n                {pagination}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\ntype AddNewPostFormType = {\r\n    newMessageBody: string\r\n}\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\n\r\nconst AddNewPostForm: React.FC<InjectedFormProps<AddNewPostFormType>> = (props) => {\r\n    const dispatch = useAppDispatch()\r\n    const onKeyDownHandler = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.keyCode === 13) {\r\n            dispatch(addPostAC(e.currentTarget.value))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit} className={s.formContainer}>\r\n            <Field component={TextArea} name={\"newMessageBody\"} placeholder={\"Enter your message\"}\r\n                   className={s.textArea} validate={[required, maxLength10]} onKeyDown={onKeyDownHandler}/>\r\n            <button className={s.addPostButton}>AddPost</button>\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\nconst AddNewPostFormRedux = reduxForm<AddNewPostFormType>({form: \"profileAddMessageForm\"})(AddNewPostForm)\r\n\r\n","import React from \"react\";\r\nimport {MyPosts} from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {addLike, addPostAC, profilePagePropsType} from \"../../../redux/profile-reducer\";\r\n\r\ntype MapStatePropsType = {\r\n    state: profilePagePropsType\r\n}\r\ntype MapDispatchPropType = {\r\n    addPost: (newMessageBody: string) => void\r\n    addLike: (idUser: string) => void\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType=> {\r\n    return {\r\n        state: state.profile\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropType => {\r\n    return {\r\n        addPost: (newPostText: string) => {\r\n            dispatch(addPostAC(newPostText))\r\n        },\r\n        addLike: (idUser: string) => {\r\n            dispatch(addLike(idUser))\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\n","import React from \"react\";\r\nimport s from \"./Profile.module.scss\";\r\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\nimport {MyPostsContainer} from \"./Myposts/MyPostsContainer\";\r\nimport {ProfileType} from \"../../redux/profile-reducer\";\r\nimport {MoonLoader} from \"react-spinners\";\r\nimport {Preloader} from \"../common/Preloader/Preloader\";\r\n\r\ntype ProfileTypeProps = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: any\r\n    // photo: string | null\r\n}\r\n\r\nexport const Profile: React.FC<ProfileTypeProps> = (props) => {\r\n    if (!props.profile) {\r\n        // return <MoonLoader color={\"#b70000\"} size={50}/>\r\n        return <Preloader/>\r\n    }\r\n    return (\r\n        <div className={s.profileContainer}>\r\n            <ProfileInfo\r\n                profile={props.profile}\r\n                status={props.status}\r\n                updateStatus={props.updateStatus}\r\n                isOwner={props.isOwner}\r\n                savePhoto={props.savePhoto}\r\n                // photo={props.photo}\r\n            />\r\n            <MyPostsContainer/>\r\n        </div>);\r\n}\r\n\r\n","import React from \"react\";\r\nimport {Profile} from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {getStatus, ProfileType, savePhoto, setUserProfileThunk, updateStatus} from \"../../redux/profile-reducer\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\ntype PathParamType = {\r\n    userId: string\r\n}\r\n\r\ntype MapStatePropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    authorizedUserId: string\r\n    isAuth: boolean\r\n    // photo: string | null\r\n}\r\ntype MapDispatchPropType = {\r\n    setUserProfileThunk: (userId: string) => void\r\n    getStatus: (userId: string) => void\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (file: any) => void\r\n}\r\n\r\ntype ProfileContainerPropsType = RouteComponentProps<PathParamType> &  MapStatePropsType & MapDispatchPropType\r\n\r\nclass ProfileContainer extends React.Component<ProfileContainerPropsType> {\r\n\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId\r\n        if(!userId) {\r\n            // userId = \"25415\"\r\n            userId = this.props.authorizedUserId\r\n            if(!userId) {\r\n                this.props.history.push(\"/login\")\r\n            }\r\n        } // 25415\r\n        this.props.setUserProfileThunk(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<ProfileContainerPropsType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        if(this.props.match.params.userId !== prevProps.match.params.userId )\r\n            this.refreshProfile()\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <Profile\r\n                profile={this.props.profile}\r\n                status={this.props.status}\r\n                updateStatus={this.props.updateStatus}\r\n                isOwner={!this.props.match.params.userId}\r\n                savePhoto={this.props.savePhoto}\r\n                // photo={this.props.photo}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        profile: state.profile.profile,\r\n        status: state.profile.status,\r\n        authorizedUserId: state.auth.id,\r\n        isAuth: state.auth.isAuth,\r\n        // photo: state.profile.profile!.photos.large\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {setUserProfileThunk, getStatus, updateStatus, savePhoto}),\r\n    withRouter,\r\n    // withAuthRedirect\r\n)(ProfileContainer)\r\n"],"names":["ProfileStatus","state","editMode","status","props","activateEditeMode","setState","deactivateEditeMode","updateStatus","onStatusChange","e","currentTarget","value","prevProps","prevState","snapshot","this","onDoubleClick","onChange","onBlur","autoFocus","React","ProfileDataForm","profile","createField","Input","lookingForAJob","lookingForAJobDescription","aboutMe","onClick","UploadPhoto","dispatch","useAppDispatch","uploader","Uploader","apiKey","urlToObject","image","fetch","response","blob","file","File","type","console","log","savePhoto","UploadButton","options","multi","onComplete","files","fileUrl","handler","style","marginTop","ProfileInfo","isOwner","useState","setEditMode","className","s","src","photos","large","getRandomArrayElement","htmlFor","uploadPhotoPNG","alt","id","target","ProfileData","goToEditMode","fullName","Post","img","name","post","likePNG","addLike","p","likesCount","MyPosts","page","setPage","postsArray","postData","allPage","Math","ceil","length","pageVision","i","push","portionArray","slice","startMessage","endMessage","foo","postsElements","map","avatar","message","buttonName","pagination","index","isActive","color","AddNewPostFormRedux","onSubmit","values","addPost","newMessageBody","maxLength10","maxLengthCreator","reduxForm","form","handleSubmit","Field","component","TextArea","placeholder","validate","required","onKeyDown","keyCode","addPostAC","MyPostsContainer","connect","newPostText","idUser","Profile","Preloader","ProfileContainer","userId","match","params","authorizedUserId","history","setUserProfileThunk","getStatus","refreshProfile","compose","auth","isAuth","withRouter"],"sourceRoot":""}