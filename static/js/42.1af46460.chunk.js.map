{"version":3,"file":"static/js/42.1af46460.chunk.js","mappings":"6LACA,G,QAAmC,mCAAnC,EAAmF,6BAAnF,EAAwH,uBAAxH,EAA0J,0BAA1J,EAAgM,2B,iDCAhM,EAAmC,kCAAnC,EAAsF,gCAAtF,EAAkI,2BAAlI,EAAmL,qCAAnL,EAAyO,gC,SCQ5NA,EAAmC,SAACC,GAE7C,OACI,gBAAKC,UAAWC,EAAhB,SACKF,EAAMG,SAASC,KAAI,SAACC,EAAGC,GAAJ,MAA8B,SAAhBD,EAAEE,WAC9B,gBAAKN,UAAWC,EAAhB,UAAkC,gBAAiBD,UAAWC,EAA5B,SAA0CG,EAAEG,SAAlCF,MAC5C,gBAAKL,UAAWC,EAAhB,UAAuC,gBAAiBD,UAAWC,EAA5B,SAA+CG,EAAEG,SAAvCF,WCdnE,EAA8B,iCAA9B,EAAwE,4BAAxE,EAA0G,yBAA1G,EAA4I,4B,UCS/HG,EAA0C,SAACT,GACpD,OACI,gBAAKC,UAAWC,EAAhB,UACQ,UAAC,KAAD,CAASQ,GAAI,YAAcV,EAAMW,GAAIV,UAAWC,EAAhD,WACI,gBAAKU,IAAKZ,EAAMa,IAAKZ,UAAWC,EAAOY,IAAI,MAC3C,gBAAKb,UAAWC,EAAhB,SAA2BF,EAAMe,aC8C/CC,GAAcC,EAAAA,EAAAA,GAAiB,IAgB/BC,GAAsBC,EAAAA,EAAAA,GAA8B,CAACC,KAAM,wBAArCD,EAdmD,SAACnB,GAC5E,OACI,kBAAMqB,SAAUrB,EAAMsB,aAAtB,WACI,0BACI,SAACC,EAAA,EAAD,CAAOC,UAAWC,EAAAA,GAAUC,SAAU,CAACC,EAAAA,EAAUX,GAAcD,KAAM,iBAC9Da,YAAa,qBAAsB3B,UAAWC,OAEzD,0BACI,qD,2CC5DZ2B,EAA6B,SAACC,GAC9B,MAAO,CACHC,OAAQD,EAAME,KAAKD,SCK3B,IAgBA,GAAeE,EAAAA,EAAAA,KDhBR,SAA6BC,GAQhC,OAAOC,EAAAA,EAAAA,IAAQN,EAA4B,CAACO,gBAAAA,EAAAA,GAAiBC,OAAAA,EAAAA,IAAtDF,EAPmB,SAACnC,GACvB,IAAK+B,EAAwB/B,EAAxB+B,OAAWO,GAAhB,OAA6BtC,EAA7B,GACA,OAAK+B,GACE,SAACG,GAAD,UAAeI,KADF,SAAC,KAAD,CAAU5B,GAAI,iBCetCyB,EAAAA,EAAAA,KAlBkB,SAACL,GACnB,MAAO,CACHA,MAAOA,EAAMS,YAKI,SAACC,GACtB,MAAO,CACHC,YAAa,SAACC,EAAwBC,GAClCH,GAASI,EAAAA,EAAAA,IAAmBF,EAAgBC,SAMxD,EFfkD,SAAC3C,GAE/C,IAAK2C,GAAUE,EAAAA,EAAAA,MAAVF,OAEDG,EAAiB9C,EAAM8B,MAAMiB,YAAY3C,KAAI,SAAC4C,GAAD,OAA6B,0BAAqB,SAACvC,EAAD,CAC/FM,KAAMiC,EAAOjC,KACbJ,GAAIqC,EAAOrC,GACXE,IAAKmC,EAAOnC,OAHwEmC,EAAOrC,OAM3FR,EAAWH,EAAM8B,MAAMiB,YAAY3C,KAAI,SAAC4C,EAAyB1C,GAA1B,OAAoC0C,EAAOrC,KAAOgC,GACvF,0BAAiB,SAAC5C,EAAD,CAAUI,SAAU6C,EAAO7C,YAAlCG,GACV,QAEN2C,QAAQC,IAAI/C,GAOZ,OACI,iBAAKF,UAAWC,EAAhB,WACI,iBAAKD,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,0BACC4C,MAEL,iBAAK7C,UAAWC,EAAhB,WACI,yBACKC,IAEJwC,IAAU,SAACzB,EAAD,CAAqBG,SAdtB,SAAC8B,GACnBnD,EAAMyC,YAAYU,EAAOT,eAAgBC","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.scss?d037","webpack://samurai-way/./src/components/Dialogs/DialogsComponents/Message/Message.module.scss?8212","components/Dialogs/DialogsComponents/Message/Message.tsx","webpack://samurai-way/./src/components/Dialogs/DialogsComponents/FriendsList/FriendsList.module.scss?e3e2","components/Dialogs/DialogsComponents/FriendsList/FriendsList.tsx","components/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogsContainer\":\"Dialogs_dialogsContainer__utsXu\",\"friendsList\":\"Dialogs_friendsList__-PNM8\",\"title\":\"Dialogs_title__NhgXm\",\"messages\":\"Dialogs_messages__UmrN6\",\"textField\":\"Dialogs_textField__escT9\"};","// extracted by mini-css-extract-plugin\nexport default {\"messageContainer\":\"Message_messageContainer__RgjE-\",\"myMessageBlock\":\"Message_myMessageBlock__F329T\",\"myMessage\":\"Message_myMessage__4rjng\",\"friendsMessageBlock\":\"Message_friendsMessageBlock__NaEXT\",\"friendsMessage\":\"Message_friendsMessage__if86N\"};","import React from \"react\";\r\nimport s from \"./Message.module.scss\"\r\nimport {Message} from \"../../../../redux/dialogs-reducer\";\r\n\r\n\r\ntype MessageProps = {\r\n    messages: Array<Message>\r\n}\r\n\r\nexport const Messages: React.FC<MessageProps> = (props) => {\r\n\r\n    return (\r\n        <div className={s.messageContainer}>\r\n            {props.messages.map((m, index) => m.idMessage === \"myId\"\r\n                ? <div className={s.myMessageBlock}><div key={index} className={s.myMessage}>{m.message}</div></div>\r\n                : <div className={s.friendsMessageBlock}><div key={index} className={s.friendsMessage}>{m.message}</div></div>\r\n            )}\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"friendBlock\":\"FriendsList_friendBlock__VubZB\",\"friend\":\"FriendsList_friend__H1RoS\",\"ava\":\"FriendsList_ava__qeGjP\",\"nameTd\":\"FriendsList_nameTd__POguG\"};","import React from \"react\";\r\nimport s from \"./FriendsList.module.scss\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype FriendsListProps = {\r\n    name: string\r\n    id: string\r\n    ava: string\r\n}\r\n\r\nexport const FriendsList: React.FC<FriendsListProps> = (props) => {\r\n    return (\r\n        <div className={s.friendBlock}>\r\n                <NavLink to={\"/dialogs/\" + props.id} className={s.friend}>\r\n                    <img src={props.ava} className={s.ava} alt=\"\"/>\r\n                    <div className={s.nameTd}>{props.name}</div>\r\n                </NavLink>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport s from './Dialogs.module.scss'\r\nimport {DialogsDataType, InitialStateType} from \"../../redux/dialogs-reducer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {TextArea} from \"../common/FormsControl/FormsControl\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport {Messages} from \"./DialogsComponents/Message/Message\";\r\nimport {FriendsList} from \"./DialogsComponents/FriendsList/FriendsList\";\r\n\r\nexport type DialogTypeProps = {\r\n    SendMessage: (values: string, userId: string) => void\r\n    updateNewMessageBody: (body: any) => void\r\n    state: InitialStateType\r\n    newMessageBody: string\r\n    isAuth: boolean\r\n}\r\n\r\n\r\nexport const Dialogs: React.FC<DialogTypeProps> = (props) => {\r\n\r\n    let {userId} = useParams<{ userId: string }>()\r\n\r\n    let dialogElements = props.state.dialogsData.map((dialog: DialogsDataType) => <div key={dialog.id}><FriendsList\r\n        name={dialog.name}\r\n        id={dialog.id}\r\n        ava={dialog.ava}/>\r\n    </div>)\r\n\r\n    let messages = props.state.dialogsData.map((dialog: DialogsDataType, index) => dialog.id === userId\r\n        ? <div key={index}><Messages messages={dialog.messages}/></div>\r\n        : null\r\n    )\r\n    console.log(messages)\r\n    // if (!props.isAuth) return <Redirect to={\"/login\"}/>\r\n\r\n    const addNewMessage = (values: AddMessageFormType) => {\r\n        props.SendMessage(values.newMessageBody, userId)\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogsContainer}>\r\n            <div className={s.friendsList}>\r\n                <div className={s.title}>Friends list</div>\r\n                {dialogElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>\r\n                    {messages}\r\n                </div>\r\n                {userId && <AddMessageFormRedux onSubmit={addNewMessage}/>}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport type AddMessageFormType = {\r\n    newMessageBody: string\r\n}\r\n\r\nconst maxLength50 = maxLengthCreator(50)\r\n\r\nexport const AddMessageForm: React.FC<InjectedFormProps<AddMessageFormType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={TextArea} validate={[required, maxLength50]} name={\"newMessageBody\"}\r\n                       placeholder={\"Enter your message\"} className={s.textField}/>\r\n            </div>\r\n            <div>\r\n                <button>Send message</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm<AddMessageFormType>({form: \"dialogAddMessageForm\"})(AddMessageForm)","import React, {ComponentType} from 'react';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\nimport {getAuthUserData, logout} from \"../redux/auth-reducer\";\r\n\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n    const RedirectComponent = (props: MapStatePropsType) => {\r\n        let {isAuth, ...restProps} = props;\r\n        if (!isAuth) return <Redirect to={\"/login\"}/>\r\n        return <Component {...restProps as T}/>\r\n    };\r\n\r\n\r\n    return connect(mapStateToPropsForRedirect, {getAuthUserData, logout})(RedirectComponent);\r\n}\r\n\r\n","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {InitialStateType, SendMessageCreator} from \"../../redux/dialogs-reducer\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {Dialogs} from \"./Dialogs\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\n\r\n\r\ntype MapStatePropsType = {\r\n    state: InitialStateType\r\n    // isAuth: boolean\r\n}\r\ntype MapDispatchPropType = {\r\n    SendMessage: (newMessageBody: string, userId: string) => void\r\n}\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        state: state.dialogs,\r\n        // isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropType => {\r\n    return {\r\n        SendMessage: (newMessageBody: string, userId: string) => {\r\n            dispatch(SendMessageCreator(newMessageBody, userId))\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    withAuthRedirect,\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n)(Dialogs)\r\n\r\n"],"names":["Messages","props","className","s","messages","map","m","index","idMessage","message","FriendsList","to","id","src","ava","alt","name","maxLength50","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","TextArea","validate","required","placeholder","mapStateToPropsForRedirect","state","isAuth","auth","compose","Component","connect","getAuthUserData","logout","restProps","dialogs","dispatch","SendMessage","newMessageBody","userId","SendMessageCreator","useParams","dialogElements","dialogsData","dialog","console","log","values"],"sourceRoot":""}