{"version":3,"file":"static/js/64.155f6726.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Profile/Profile.module.scss?4008","webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileInfo.module.scss?e49f","components/Profile/ProfileInfo/ProfileStatus/ProfileStatus.tsx","webpack://samurai-way/./src/components/common/FormInput/FormInput.module.scss?45cd","components/common/FormInput/FormInput.tsx","components/Profile/ProfileInfo/ProfileDataForm/ProfileDataForm.tsx","webpack://samurai-way/./src/components/common/UploadPhoto/UploadPhoto.module.scss?d9c3","components/common/UploadPhoto/FileInput.tsx","components/common/UploadPhoto/ImageCropper.tsx","components/common/UploadPhoto/UploadPhoto.tsx","webpack://samurai-way/./src/components/common/ZoomPhoto/ZoomPhoto.module.scss?64f2","components/common/ZoomPhoto/ZoomPhoto.tsx","components/Profile/ProfileInfo/ProfileData/ProfileData.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/Myposts/MyPosts.module.scss?f352","webpack://samurai-way/./src/components/Profile/Myposts/Posts/Post.module.scss?d046","components/Profile/Myposts/Posts/Post.tsx","components/Profile/Myposts/MyPosts.tsx","components/Profile/Myposts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","webpack://samurai-way/./src/components/common/AddMessageForm/AddMessageForm.module.scss?998b","webpack://samurai-way/./src/components/common/BigButton/BigButton.module.scss?56ba","components/common/BigButton/BigButton.tsx","components/common/AddMessageForm/AddMessageForm.tsx","hoc/withAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"profileContainer\":\"Profile_profileContainer__GK-ND\"};","// extracted by mini-css-extract-plugin\nexport default {\"profileInfoContainer\":\"ProfileInfo_profileInfoContainer__9v5Ik\",\"profileInfoBlock\":\"ProfileInfo_profileInfoBlock__goYeC\",\"avatarBlock\":\"ProfileInfo_avatarBlock__21pru\",\"mainAvatar\":\"ProfileInfo_mainAvatar__jA7Gf\",\"avatar\":\"ProfileInfo_avatar__KQ0zh\",\"photoBlock\":\"ProfileInfo_photoBlock__Fnyh3\",\"buttonBlock\":\"ProfileInfo_buttonBlock__YEkP3\",\"updatePhotoButton\":\"ProfileInfo_updatePhotoButton__r62FH\",\"zoomPhotoButton\":\"ProfileInfo_zoomPhotoButton__pxafQ\",\"back\":\"ProfileInfo_back__DRn5g\",\"uploadPhotoBlock\":\"ProfileInfo_uploadPhotoBlock__usFJj\",\"supportText\":\"ProfileInfo_supportText__YZUeA\",\"uploadPhoto\":\"ProfileInfo_uploadPhoto__1VHeP\",\"inputUploadPhoto\":\"ProfileInfo_inputUploadPhoto__UajYh\",\"profileBlock\":\"ProfileInfo_profileBlock__5piPY\",\"profileStatus\":\"ProfileInfo_profileStatus__jnFRU\",\"profileDataForm\":\"ProfileInfo_profileDataForm__O8l5p\"};","import React from 'react';\r\nimport {RiEdit2Line} from \"react-icons/ri\";\r\n\r\ntype ProfileStatusType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nclass ProfileStatus extends React.Component<ProfileStatusType> {\r\n\r\n    state = {\r\n        editMode: false,\r\n        status: this.props.status\r\n    }\r\n\r\n    activateEditeMode = () => {\r\n        this.setState({\r\n            editMode: true\r\n        })\r\n    }\r\n\r\n    deactivateEditeMode = () => {\r\n        this.setState({\r\n            editMode: false\r\n        })\r\n        this.props.updateStatus(this.state.status)\r\n    }\r\n\r\n    onStatusChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({\r\n            status: e.currentTarget.value\r\n        })\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<ProfileStatusType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        if ( prevProps.status !== this.props.status ) {  this.setState({ status: this.props.status })  }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {!this.state.editMode &&\r\n                    <div>\r\n                        <span\r\n                            onDoubleClick={this.activateEditeMode}>{this.props.status ? this.props.status : \"изменить статус\"}\r\n                        </span>\r\n                        <RiEdit2Line style={{fontSize:20, marginLeft: 15, position: \"absolute\"}}/>\r\n                    </div>\r\n                }\r\n                {this.state.editMode &&\r\n                    <div>\r\n                        <input onChange={this.onStatusChange} value={this.state.status}\r\n                               onBlur={this.deactivateEditeMode} autoFocus></input>\r\n                    </div>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ProfileStatus;","// extracted by mini-css-extract-plugin\nexport default {\"input\":\"FormInput_input__JFMqH\"};","import React, {useState} from \"react\";\r\nimport s from \"./FormInput.module.scss\";\r\n\r\n\r\nexport type FormInputType = {\r\n    placeHolder?: string\r\n    value: string\r\n    onChange: (value: React.ChangeEvent<HTMLInputElement>) => void\r\n}\r\n\r\n\r\nexport const FormInput: React.FC<FormInputType> = ({placeHolder, value, onChange}) => {\r\n    // const [value, setValue] = useState(\"\")\r\n    //\r\n    // const setValueHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    //     setValue(e.currentTarget.value)\r\n    // }\r\n\r\n    return (\r\n            <input className={s.input} placeholder={placeHolder} value={value}\r\n                      onChange={onChange}>\r\n            </input>\r\n    )\r\n}\r\n\r\n","import React, {FC, useState} from 'react';\r\nimport MainButton from \"../../../common/MainButton/MainButton\";\r\nimport {ProfileType} from \"../../../../redux/profile-reducer\";\r\nimport {ProfileDataTypeServer} from \"../../../../api/api\";\r\nimport {FormInput} from \"../../../common/FormInput/FormInput\";\r\n\r\ntype ProfileDataFormPropsType = {\r\n    profile: ProfileType\r\n    updateProfileData: (data: ProfileDataTypeServer, userId: string) => void\r\n    setEditMode: () => void\r\n}\r\n\r\nexport const ProfileDataForm: FC<ProfileDataFormPropsType> = ({profile, updateProfileData, setEditMode}) => {\r\n\r\n    const [profileData, setProfileData] = useState<ProfileDataType>({\r\n        fullName: profile!.fullName,\r\n        lookingForAJob: profile!.lookingForAJob,\r\n        lookingForAJobDescription: profile!.lookingForAJobDescription,\r\n        aboutMe: profile!.aboutMe,\r\n\r\n    })\r\n\r\n\r\n    const inputFullName = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setProfileData({...profileData, fullName: e.currentTarget.value})\r\n    }\r\n\r\n    const inputDescription = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setProfileData({...profileData, lookingForAJobDescription: e.currentTarget.value})\r\n    }\r\n\r\n    const inputAboutMe = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setProfileData({...profileData, aboutMe: e.currentTarget.value})\r\n    }\r\n\r\n    const radioLookingForAJob = (value: boolean) => {\r\n        setProfileData({...profileData, lookingForAJob: value})\r\n    }\r\n\r\n    const newData: ProfileDataTypeServer = {\r\n        userId: profile!.userId,\r\n        contacts: {\r\n            github: \"\",\r\n            vk: \"\",\r\n            facebook: \"\",\r\n            instagram: \"\",\r\n            twitter: \"\",\r\n            website: \"\",\r\n            youtube: \"\",\r\n            mainLink: \"\",\r\n        },\r\n        ...profileData\r\n    }\r\n    // const newData = {...profileData}\r\n\r\n    const onCLickHandler = () => {\r\n        updateProfileData(newData, String(profile!.userId))\r\n        setEditMode()\r\n    }\r\n\r\n    return (\r\n        <form>\r\n            <div>\r\n                <b>Full Name</b>: <FormInput value={profileData.fullName} onChange={inputFullName}/>\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job</b>:\r\n                <label>\r\n                    <input type=\"radio\" name={\"radio\"} value={\"true\"} checked={profileData.lookingForAJob}\r\n                           onChange={() => radioLookingForAJob(true)}/> yes\r\n                    <input type=\"radio\" name={\"radio\"} value={\"false\"} checked={!profileData.lookingForAJob}\r\n                           onChange={() => radioLookingForAJob(false)}/> no\r\n                </label>\r\n            </div>\r\n            {profileData.lookingForAJob &&\r\n                <div>\r\n                    <b>My professional skills</b>: <FormInput value={profileData.lookingForAJobDescription} onChange={inputDescription}/>\r\n                </div>\r\n            }\r\n            <div>\r\n                <b>About me</b>: <FormInput value={profileData.aboutMe} onChange={inputAboutMe}/>\r\n            </div>\r\n            <div>\r\n\r\n            </div>\r\n            <div style={{display: \"flex\", justifyContent: \"flex-end\", marginTop: 10}}>\r\n                <span><MainButton onClick={onCLickHandler} nameButton={\"save\"}/></span>\r\n                <span style={{marginLeft:\"5px\"}}><MainButton onClick={() => setEditMode()} nameButton={\"close\"}/></span>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport type ProfileDataType = {\r\n    fullName: string\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    aboutMe: string\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"uploadPhotoContainer\":\"UploadPhoto_uploadPhotoContainer__I1+lI\",\"closeTag\":\"UploadPhoto_closeTag__pfnpE\",\"cropperContainer\":\"UploadPhoto_cropperContainer__XwKCl\",\"cropper\":\"UploadPhoto_cropper__19sTC\",\"settings\":\"UploadPhoto_settings__UgolO\",\"radioButton\":\"UploadPhoto_radioButton__9bxUv\",\"buttons\":\"UploadPhoto_buttons__KxXwU\",\"button\":\"UploadPhoto_button__OU0yZ\"};","import React, {FC, useRef} from \"react\";\r\nimport s from './UploadPhoto.module.scss'\r\nimport './Style.css'\r\n\r\ntype FileInputPropsType = {\r\n  onImageSelected: (selectedImg: any) => void\r\n}\r\n\r\nconst FileInput: FC<FileInputPropsType> = ({ onImageSelected }) => {\r\n  const inputRef = useRef<any>();\r\n\r\n  const handleOnChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    if (event.target.files && event.target.files.length > 0) {\r\n      const reader = new FileReader();\r\n      reader.readAsDataURL(event.target.files[0]);\r\n      reader.onload = function (e) {\r\n        onImageSelected(reader.result);\r\n      };\r\n    }\r\n  };\r\n\r\n  const onChooseImg = () => {\r\n    inputRef.current.click();\r\n  };\r\n\r\n  return (\r\n    <div className={s.fileInputContainer}>\r\n      <input\r\n        type=\"file\"\r\n        accept=\"image/*\"\r\n        ref={inputRef}\r\n        onChange={handleOnChange}\r\n        style={{ display: \"none\" }}\r\n      />\r\n\r\n      <button className=\"btn\" onClick={onChooseImg}>\r\n        Choose Image\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FileInput;","import React, {FC, useState} from \"react\";\r\nimport Cropper, {Area} from \"react-easy-crop\";\r\nimport s from './UploadPhoto.module.scss'\r\n\r\n\r\ntype ImageCropperPropsType = {\r\n    image: string\r\n    onCropDone: (imgCroppedArea: any) => void\r\n    onCropCancel: () => void\r\n}\r\n\r\nconst ImageCropper: FC<ImageCropperPropsType> = ({ image, onCropDone, onCropCancel }) => {\r\n    const [crop, setCrop] = useState({ x: 0, y: 0 });\r\n    const [zoom, setZoom] = useState(1);\r\n    const [croppedArea, setCroppedArea] = useState(null);\r\n    const [aspectRatio, setAspectRatio] = useState(5 / 4);\r\n\r\n    const onCropComplete = (croppedAreaPercentage: Area, croppedAreaPixels: any) => {\r\n        setCroppedArea(croppedAreaPixels);\r\n    };\r\n\r\n    const onAspectRatioChange = (event: any) => {\r\n        setAspectRatio(event.target.value);\r\n    };\r\n\r\n    const zoomHandler = () => {\r\n        window.onwheel = (e) => {\r\n            if (e.deltaY < 0) {\r\n                setZoom(zoom + 0.2)\r\n            } else {\r\n                setZoom(zoom - 0.2)\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={s.cropperContainer}>\r\n            <div className={s.cropper}>\r\n                <Cropper\r\n                    image={image}\r\n                    aspect={aspectRatio}\r\n                    crop={crop}\r\n                    zoom={zoom}\r\n                    onCropChange={setCrop}\r\n                    onZoomChange={zoomHandler}\r\n                    onCropComplete={onCropComplete}\r\n                    style={{\r\n                        containerStyle: {\r\n                            width: \"100%\",\r\n                            height: \"80%\",\r\n                            backgroundColor: \"#fff\",\r\n                        },\r\n                    }}\r\n                />\r\n            </div>\r\n\r\n            <div className={s.settings}>\r\n                <div className={s.radioButton} onChange={onAspectRatioChange}>\r\n                    <input type=\"radio\" value={1 / 1} name=\"ratio\"/> 1:1\r\n                    <input type=\"radio\" value={5 / 4} name=\"ratio\"/> 5:4\r\n                    <input type=\"radio\" value={4 / 3} name=\"ratio\" /> 4:3\r\n                    <input type=\"radio\" value={3 / 2} name=\"ratio\" /> 3:2\r\n                    <input type=\"radio\" value={5 / 3} name=\"ratio\" /> 5:3\r\n                    <input type=\"radio\" value={16 / 9} name=\"ratio\" /> 16:9\r\n                    <input type=\"radio\" value={3 / 1} name=\"ratio\" /> 3:1\r\n                </div>\r\n\r\n\r\n                <div className={s.buttons}>\r\n                    <button className={s.button} onClick={onCropCancel}>\r\n                        Cancel\r\n                    </button>\r\n\r\n                    <button\r\n                        className={s.button}\r\n                        onClick={() => {\r\n                            onCropDone(croppedArea);\r\n                        }}\r\n                    >\r\n                        Done\r\n                    </button>\r\n                </div>\r\n\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ImageCropper;","import React, {FC, useState} from \"react\";\r\nimport FileInput from \"./FileInput\";\r\nimport ImageCropper from \"./ImageCropper\";\r\nimport s from './UploadPhoto.module.scss'\r\nimport {AiFillCloseCircle} from \"react-icons/ai\";\r\n\r\ntype UploadPhotoPropsType = {\r\n    setUploadPhoto: (uploadPhoto: boolean) => void\r\n    savePhoto: (file: any) => void\r\n}\r\n\r\nconst UploadPhoto: FC<UploadPhotoPropsType> = ({savePhoto, setUploadPhoto}) => {\r\n    const [image, setImage] = useState(\"\");\r\n    const [currentPage, setCurrentPage] = useState(\"choose-img\");\r\n    const [imgAfterCrop, setImgAfterCrop] = useState(\"\");\r\n\r\n    // Invoked when new image file is selected\r\n    const onImageSelected = (selectedImg: string) => {\r\n        setImage(selectedImg);\r\n        setCurrentPage(\"crop-img\");\r\n    };\r\n\r\n    // Generating Cropped Image When Done Button Clicked\r\n    const onCropDone = (imgCroppedArea: any) => {\r\n        const canvasEle = document.createElement(\"canvas\");\r\n        canvasEle.width = imgCroppedArea.width;\r\n        canvasEle.height = imgCroppedArea.height;\r\n\r\n        const context = canvasEle.getContext(\"2d\");\r\n\r\n        let imageObj1 = new Image();\r\n        imageObj1.src = image;\r\n        imageObj1.onload = function () {\r\n            context!.drawImage(\r\n                imageObj1,\r\n                imgCroppedArea.x,\r\n                imgCroppedArea.y,\r\n                imgCroppedArea.width,\r\n                imgCroppedArea.height,\r\n                0,\r\n                0,\r\n                imgCroppedArea.width,\r\n                imgCroppedArea.height\r\n            );\r\n\r\n            const dataURL = canvasEle.toDataURL(\"image/jpeg\");\r\n            setImgAfterCrop(dataURL);\r\n            setCurrentPage(\"img-cropped\");\r\n            savePhoto(dataURL)\r\n            urlToObject(dataURL)\r\n        };\r\n    };\r\n\r\n    const urlToObject = async (imageURL: string) => {\r\n        debugger\r\n        const response = await fetch(imageURL);\r\n        // here image is url/location of image\r\n        const blob = await response.blob();\r\n        // const file = new File([blob], 'image.jpg', {type: blob.type});\r\n        var image = new Image();\r\n        image.src = imageURL\r\n        console.log(image)\r\n        const file = new File([blob], 'image.jpg', {type: blob.type});\r\n        // {type: 'image/jpg'}\r\n        console.log(file)\r\n        savePhoto(file)\r\n        setUploadPhoto(false)\r\n    }\r\n\r\n    // Handle Cancel Button Click\r\n    const onCropCancel = () => {\r\n        setCurrentPage(\"choose-img\");\r\n        setImage(\"\");\r\n    };\r\n\r\n    return (\r\n        <div className={s.uploadPhotoContainer}>\r\n            <div className={s.closeTag} onClick={() => setUploadPhoto(false)}><AiFillCloseCircle\r\n                style={{fontSize: \"22px\"}}/></div>\r\n            {currentPage === \"choose-img\" ? (\r\n                <FileInput onImageSelected={onImageSelected}/>\r\n            ) : currentPage === \"crop-img\" ? (\r\n                <ImageCropper\r\n                    image={image}\r\n                    onCropDone={onCropDone}\r\n                    onCropCancel={onCropCancel}\r\n                />\r\n            ) : (\r\n                <div className={s.bottomBlock}>\r\n                    <div>\r\n                        <img src={imgAfterCrop} className={s.croppedIMG}/>\r\n                    </div>\r\n\r\n                    <button\r\n                        onClick={() => {\r\n                            setCurrentPage(\"crop-img\");\r\n                        }}\r\n                        className=\"btn\"\r\n                    >\r\n                        Crop\r\n                    </button>\r\n\r\n                    <button\r\n                        onClick={() => {\r\n                            setCurrentPage(\"choose-img\");\r\n                            setImage(\"\");\r\n                        }}\r\n                        className=\"btn\"\r\n                    >\r\n                        New Image\r\n                    </button>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default UploadPhoto;","// extracted by mini-css-extract-plugin\nexport default {\"zoomPhotoContainer\":\"ZoomPhoto_zoomPhotoContainer__3qQ8I\",\"closeIcon\":\"ZoomPhoto_closeIcon__m9jVV\",\"zoomPhoto\":\"ZoomPhoto_zoomPhoto__D-1D+\"};","import React from 'react';\r\nimport s from './ZoomPhoto.module.scss'\r\nimport {AiFillCloseCircle} from \"react-icons/ai\";\r\n\r\ntype ZoomPhotoPropsType = {\r\n    setZoomPhoto: (zoomPhoto: boolean) => void\r\n    img: any\r\n}\r\n\r\nconst ZoomPhoto: React.FC<ZoomPhotoPropsType> = ({setZoomPhoto, img}) => {\r\n    return (\r\n        <div className={s.zoomPhotoContainer}>\r\n            <div className={s.closeIcon} onClick={() => setZoomPhoto(false)}> <AiFillCloseCircle\r\n                style={{fontSize: \"22px\"}}/></div>\r\n            <img src={img} alt=\"zoom Photo\" className={s.zoomPhoto}/>\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\nexport default ZoomPhoto;","import React, {FC} from 'react';\r\nimport {ProfileType} from \"../../../../redux/profile-reducer\";\r\nimport MainButton from \"../../../common/MainButton/MainButton\";\r\n\r\ntype ProfileBlockPropsType = {\r\n    profile: ProfileType\r\n    isOwner?: boolean\r\n    goToEditMode?: () => void\r\n}\r\n\r\nexport const ProfileData: FC<ProfileBlockPropsType> = ({profile, isOwner, goToEditMode}) => {\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <b>Full Name</b>: {profile!.fullName}\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job</b>: {profile!.lookingForAJob ? \"yes\" : \"no\"}\r\n            </div>\r\n            {profile!.lookingForAJob &&\r\n                <div>\r\n                    <b>My professional skills</b>: {profile!.lookingForAJobDescription}\r\n                </div>\r\n            }\r\n            <div>\r\n                <b>About me</b>: {profile!.aboutMe}\r\n            </div>\r\n            <div>\r\n                {/*<b>Contacts</b>: {Object.keys(profile!.contacts).map((key) => {*/}\r\n                {/*return <Contact key={key} contactTitle={key} contactValue={profile!.contacts[key]} />*/}\r\n                {/*})}*/}\r\n            </div>\r\n            {isOwner &&\r\n                // <button onClick={goToEditMode} className={s.buttonEditProfile}>edit</button>\r\n                <div style={{display:\"flex\", justifyContent: \"flex-end\", marginTop: 11}}><MainButton onClick={() => goToEditMode!()} nameButton={\"edit\"}/></div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n// const Contact = (contactTitle: string, contactValue: string) => {\r\n//     return <div><b>{contactTitle}</b>: {contactValue}</div>\r\n// }","import React, {useState} from \"react\";\r\nimport s from \"./ProfileInfo.module.scss\";\r\nimport {ProfileType} from \"../../../redux/profile-reducer\";\r\nimport ProfileStatus from './ProfileStatus/ProfileStatus'\r\nimport {ProfileDataForm} from \"./ProfileDataForm/ProfileDataForm\";\r\nimport {getRandomArrayElement} from \"../../Users/getRandomArrayElement\";\r\nimport 'react-image-crop/src/ReactCrop.scss'\r\nimport UploadPhoto from \"../../common/UploadPhoto/UploadPhoto\";\r\nimport ZoomPhoto from \"../../common/ZoomPhoto/ZoomPhoto\";\r\nimport {ProfileDataTypeServer} from \"../../../api/api\";\r\nimport {ProfileData} from \"./ProfileData/ProfileData\";\r\n\r\n\r\ntype ProfileInfoType = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: any) => void\r\n    authId: number | null\r\n    updateProfileData: (data: ProfileDataTypeServer, userId: string) => void\r\n\r\n}\r\n\r\nexport const ProfileInfo: React.FC<ProfileInfoType> = ({profile, isOwner, savePhoto, ...props}) => {\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [uploadPhoto, setUploadPhoto] = useState(false)\r\n    const [zoomPhoto, setZoomPhoto] = useState(false)\r\n\r\n    const avatar = profile?.photos.large !== null ? profile?.photos.large : getRandomArrayElement()\r\n    const authMeNumber = Number(props.authId)\r\n    return (\r\n        <div className={s.profileInfoContainer}>\r\n            <div className={s.profileInfoBlock}>\r\n                <div className={s.avatarBlock}>\r\n                    <div className={s.mainAvatar}>\r\n                        <img id=\"photo\"\r\n                             src={avatar}\r\n                             className={s.avatar}/>\r\n                        {isOwner\r\n                            ? <div className={s.photoBlock}>\r\n                                <div className={s.buttonBlock}>\r\n                                    <button className={s.updatePhotoButton} onClick={() => setUploadPhoto(true)}> Upload\r\n                                        photo\r\n                                    </button>\r\n                                    <button className={s.zoomPhotoButton} onClick={() => setZoomPhoto(true)}> Zoom photo\r\n                                    </button>\r\n                                </div>\r\n\r\n                            </div>\r\n                            : <div className={s.photoBlock}>\r\n                                <div className={s.buttonBlock}>\r\n                                    <button className={s.zoomPhotoButton} onClick={() => setZoomPhoto(true)}> Zoom photo\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                        }\r\n                        {uploadPhoto && <UploadPhoto savePhoto={savePhoto} setUploadPhoto={setUploadPhoto}/>}\r\n                        {zoomPhoto && <ZoomPhoto setZoomPhoto={setZoomPhoto} img={avatar}/>}\r\n                    </div>\r\n                </div>\r\n                <div className={s.profileBlock}>\r\n                    <div className={s.profileStatus}>\r\n                        <div>Status:</div>\r\n                        {profile!.userId === authMeNumber\r\n                            ? <ProfileStatus status={props.status} updateStatus={props.updateStatus}/>\r\n                            : <span>{props.status}</span>\r\n                        }\r\n                    </div>\r\n                    {editMode\r\n                        ? <div className={s.profileDataForm}>\r\n                            <ProfileDataForm profile={profile} updateProfileData={props.updateProfileData}\r\n                                             setEditMode={() => setEditMode(false)}/>\r\n                        </div>\r\n                        : <div className={s.profileDataForm}>\r\n                            <ProfileData goToEditMode={() => setEditMode(true)} profile={profile} isOwner={isOwner}/>\r\n                        </div>\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"myPostContainer\":\"MyPosts_myPostContainer__3vuVZ\",\"addForm\":\"MyPosts_addForm__CwT0C\",\"messageBlock\":\"MyPosts_messageBlock__4JDWJ\",\"item\":\"MyPosts_item__ydHH-\",\"paginationBlock\":\"MyPosts_paginationBlock__3AASw\",\"pagination\":\"MyPosts_pagination__NnNu+\"};","// extracted by mini-css-extract-plugin\nexport default {\"postContainer\":\"Post_postContainer__jxQ-s\",\"avaBlock\":\"Post_avaBlock__8rQEc\",\"ava\":\"Post_ava__wjWVP\",\"textBlock\":\"Post_textBlock__UkJVG\",\"name\":\"Post_name__Xr5Bj\",\"message\":\"Post_message__Qy6Nf\",\"like\":\"Post_like__wVdVD\"};","import React from \"react\";\r\nimport s from \"./Post.module.scss\";\r\nimport likePNG from '../../../../assets/png/like.png'\r\nimport {postDataPropsType, ProfileType} from \"../../../../redux/profile-reducer\";\r\n\r\ntype DataTypeProps = {\r\n    post: string\r\n    name: string\r\n    img: string\r\n    buttonName: string\r\n    likesCount: number\r\n    p: postDataPropsType\r\n    addLike: (idUser: string) => void\r\n    profile: ProfileType\r\n}\r\n\r\nexport const Post: React.FC<DataTypeProps> = (props) => {\r\n    return (\r\n        <div className={s.postContainer}>\r\n            <div className={s.avaBlock}><img src={props.img} alt=\"avatar\" className={s.ava}/></div>\r\n            <div className={s.textBlock}>\r\n                <div className={s.name}>{props.name}</div>\r\n                <div className={s.message}>{props.post}</div>\r\n            </div>\r\n            <img src={likePNG} alt=\"likePNG\" className={s.like}\r\n                 onClick={() => props.addLike(props.p.id)}/>\r\n            {props.likesCount}\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n","import React, {useState} from \"react\";\r\nimport s from \"./MyPosts.module.scss\";\r\nimport {Post} from \"./Posts/Post\";\r\nimport {profilePagePropsType, ProfileType} from \"../../../redux/profile-reducer\";\r\nimport {AddMessageForm} from \"../../common/AddMessageForm/AddMessageForm\";\r\n\r\n\r\ntype MyPostPropType = {\r\n    state: profilePagePropsType\r\n    addPost: (values: string, ava: string) => void\r\n    addLike: (idUser: string) => void\r\n    profile: ProfileType\r\n\r\n}\r\n\r\nexport const MyPosts: React.FC<MyPostPropType> = React.memo((props) => {\r\n\r\n    const [page, setPage] = useState(1)\r\n    const postsArray = props.state.postData\r\n    const ava = props.profile!.photos.large\r\n    const allPage = Math.ceil(postsArray.length / 5)\r\n    const pageVision = []\r\n\r\n    for (let i = 1; i < allPage + 1; i++) {\r\n        pageVision.push(i)\r\n    }\r\n    const foo = (page: number) => {\r\n        if (page === 1) {\r\n            return postsArray.slice(0, 5)\r\n        } else if (page > 1) {\r\n            const startMessage = (page * 5) - 5\r\n            const endMessage = page * 5\r\n            return postsArray.slice(startMessage, endMessage)\r\n        }\r\n    }\r\n\r\n    const portionArray = foo(page)\r\n\r\n\r\n\r\n    let postsElements = portionArray!.map(p => <div key={p.id}><Post img={p.avatar}\r\n                                                                     name={p.name}\r\n                                                                     post={p.message}\r\n                                                                     likesCount={p.likesCount}\r\n                                                                     buttonName={\"Like\"}\r\n                                                                     addLike={props.addLike}\r\n                                                                     p={p}\r\n                                                                     profile={props.profile}\r\n\r\n    />\r\n    </div>)\r\n\r\n    let pagination = pageVision.map((p, index) => {\r\n        const isActive = page === p ? {color: \"rgb(211, 181, 91)\"} : {}\r\n        return <span key={index} className={s.pagination} style={isActive} onClick={() => setPage(p)}>{p}</span>\r\n    })\r\n\r\n    const avatar = ava ? ava : \"https://sun9-55.userapi.com/impf/4OVa92OuK5A2PL1OkHkfDHRK41EaNgTpv860Tw/DVztYSAWFbA.jpg?size=512x512&quality=96&sign=2df645602452340721ae5fcaeffc49ae&type=album\"\r\n\r\n    const addPost = (values: string) => {\r\n        props.addPost(values, avatar)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={s.myPostContainer}>\r\n            <div className={s.addForm}>\r\n                <AddMessageForm onSubmit={addPost}/>\r\n            </div>\r\n            <div className={s.messageBlock}>\r\n                <div className={s.item}>\r\n                    {postsElements}\r\n                </div>\r\n            </div>\r\n            <div className={s.paginationBlock}>\r\n                {pagination.length > 1 && pagination}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport {MyPosts} from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {addLike, addPostAC, profilePagePropsType, ProfileType} from \"../../../redux/profile-reducer\";\r\n\r\ntype MapStatePropsType = {\r\n    state: profilePagePropsType\r\n    profile: ProfileType\r\n}\r\n\r\ntype MapDispatchPropType = {\r\n    addPost: (values: string, ava: string) => void\r\n    addLike: (idUser: string) => void\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType=> {\r\n    return {\r\n        state: state.profile,\r\n        profile: state.profile.profile,\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropType => {\r\n    return {\r\n        addPost: (newPostText: string, ava: string) => {\r\n            dispatch(addPostAC(newPostText, ava))\r\n        },\r\n        addLike: (idUser: string) => {\r\n            dispatch(addLike(idUser))\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\n","import React from \"react\";\r\nimport s from \"./Profile.module.scss\";\r\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\nimport {MyPostsContainer} from \"./Myposts/MyPostsContainer\";\r\nimport {ProfileType} from \"../../redux/profile-reducer\";\r\nimport {Preloader} from \"../common/Preloader/Preloader\";\r\nimport {ProfileDataTypeServer} from \"../../api/api\";\r\n\r\ntype ProfileTypeProps = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: any\r\n    authId: number | null\r\n    updateProfileData: (data: ProfileDataTypeServer, userId: string) => void\r\n}\r\n\r\nexport const Profile: React.FC<ProfileTypeProps> = (props) => {\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n    return (\r\n        <div className={s.profileContainer}>\r\n            <ProfileInfo\r\n                profile={props.profile}\r\n                status={props.status}\r\n                updateStatus={props.updateStatus}\r\n                isOwner={props.isOwner}\r\n                savePhoto={props.savePhoto}\r\n                authId={props.authId}\r\n                updateProfileData={props.updateProfileData}\r\n            />\r\n            <MyPostsContainer/>\r\n        </div>);\r\n}\r\n\r\n","import React from \"react\";\r\nimport {Profile} from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {\r\n    getStatus,\r\n    ProfileType,\r\n    savePhoto,\r\n    setUserProfileThunk,\r\n    updateProfileDataThunk,\r\n    updateStatus\r\n} from \"../../redux/profile-reducer\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {ProfileDataTypeServer} from \"../../api/api\";\r\n\r\n\r\ntype PathParamType = {\r\n    userId: number | null\r\n}\r\n\r\ntype MapStatePropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    authorizedUserId: number | null\r\n    isAuth: boolean\r\n    authId: number | null\r\n}\r\ntype MapDispatchPropType = {\r\n    setUserProfileThunk: (userId: number | null) => void\r\n    getStatus: (userId: number | null) => void\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (file: any) => void\r\n    updateProfileDataThunk: (data: ProfileDataTypeServer, userId: string) => void\r\n}\r\n\r\n// type ProfileContainerPropsType = RouteComponentProps<PathParamType> & MapStatePropsType & MapDispatchPropType\r\ntype ProfileContainerPropsType = RouteComponentProps<any> & MapStatePropsType & MapDispatchPropType\r\n\r\nclass ProfileContainer extends React.Component<ProfileContainerPropsType> {\r\n\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId\r\n        if(!userId) {\r\n            userId = this.props.authorizedUserId\r\n            if(!userId) {\r\n                this.props.history.push(\"/login\")\r\n            }\r\n        }\r\n        this.props.setUserProfileThunk(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<ProfileContainerPropsType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        if(this.props.match.params.userId !== prevProps.match.params.userId )\r\n            this.refreshProfile()\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <Profile\r\n                profile={this.props.profile}\r\n                status={this.props.status}\r\n                updateStatus={this.props.updateStatus}\r\n                isOwner={!this.props.match.params.userId}\r\n                savePhoto={this.props.savePhoto}\r\n                authId={this.props.authId}\r\n                updateProfileData={this.props.updateProfileDataThunk}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        profile: state.profile.profile,\r\n        status: state.profile.status,\r\n        authorizedUserId: state.auth.id,\r\n        isAuth: state.auth.isAuth,\r\n        authId: state.auth.id\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {setUserProfileThunk, getStatus, updateStatus, savePhoto, updateProfileDataThunk}),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer)\r\n","// extracted by mini-css-extract-plugin\nexport default {\"addMessageFormBlock\":\"AddMessageForm_addMessageFormBlock__6flMP\",\"textField\":\"AddMessageForm_textField__D9IqF\"};","// extracted by mini-css-extract-plugin\nexport default {\"button\":\"BigButton_button__G3XYN\"};","import React, {FC} from 'react';\r\nimport s from \"./BigButton.module.scss\"\r\n\r\ntype ButtonPropsType = {\r\n    onClick: () => void\r\n}\r\n\r\nconst BigButton: FC<ButtonPropsType> = ({onClick}) => {\r\n    return (\r\n        <button className={s.button} onClick={onClick}>AddPost</button>\r\n    );\r\n};\r\n\r\nexport default BigButton;","import React, {useState} from \"react\";\r\nimport s from \"./AddMessageForm.module.scss\";\r\nimport BigButton from \"../BigButton/BigButton\";\r\n\r\n\r\nexport type AddMessageFormType = {\r\n    onSubmit: (values: string) => void\r\n}\r\n\r\n\r\nexport const AddMessageForm: React.FC<AddMessageFormType> = (props) => {\r\n    const [value, setValue] = useState(\"\")\r\n\r\n    const setValueHandler = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\r\n        setValue(e.currentTarget.value)\r\n    }\r\n\r\n    const sendMessage = () => {\r\n        if (value !== \"\") {\r\n            props.onSubmit(value)\r\n            setValue(\"\")\r\n        }\r\n    }\r\n\r\n    const onKeyDownHandler = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\r\n        if (e.key === \"Enter\") {\r\n            props.onSubmit(value)\r\n            setValue(\"\")\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={s.addMessageFormBlock}>\r\n            <textarea className={s.textField} placeholder={\"Enter your message\"} value={value}\r\n                      onChange={setValueHandler} onKeyDown={onKeyDownHandler}>\r\n            </textarea>\r\n            <BigButton onClick={sendMessage}/>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, {ComponentType} from 'react';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\nimport {getAuthUserData, logout} from \"../redux/auth-reducer\";\r\n\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n    const RedirectComponent = (props: MapStatePropsType) => {\r\n        let {isAuth, ...restProps} = props;\r\n        if (!isAuth) return <Redirect to={\"/login\"}/>\r\n        return <Component {...restProps as T}/>\r\n    };\r\n\r\n\r\n    return connect(mapStateToPropsForRedirect, {getAuthUserData, logout})(RedirectComponent);\r\n}\r\n\r\n"],"names":["ProfileStatus","state","editMode","status","props","activateEditeMode","setState","deactivateEditeMode","updateStatus","onStatusChange","e","currentTarget","value","prevProps","prevState","snapshot","this","onDoubleClick","style","fontSize","marginLeft","position","onChange","onBlur","autoFocus","React","FormInput","placeHolder","className","s","placeholder","ProfileDataForm","profile","updateProfileData","setEditMode","useState","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","profileData","setProfileData","radioLookingForAJob","newData","userId","contacts","github","vk","facebook","instagram","twitter","website","youtube","mainLink","type","name","checked","display","justifyContent","marginTop","MainButton","onClick","String","nameButton","onImageSelected","inputRef","useRef","accept","ref","event","target","files","length","reader","FileReader","readAsDataURL","onload","result","current","click","image","onCropDone","onCropCancel","x","y","crop","setCrop","zoom","setZoom","croppedArea","setCroppedArea","aspectRatio","setAspectRatio","aspect","onCropChange","onZoomChange","window","onwheel","deltaY","onCropComplete","croppedAreaPercentage","croppedAreaPixels","containerStyle","width","height","backgroundColor","savePhoto","setUploadPhoto","setImage","currentPage","setCurrentPage","imgAfterCrop","setImgAfterCrop","urlToObject","imageURL","fetch","response","blob","Image","src","console","log","file","File","selectedImg","imgCroppedArea","canvasEle","document","createElement","context","getContext","imageObj1","drawImage","dataURL","toDataURL","setZoomPhoto","img","alt","ProfileData","isOwner","goToEditMode","ProfileInfo","uploadPhoto","zoomPhoto","avatar","photos","large","getRandomArrayElement","authMeNumber","Number","authId","id","Post","post","likePNG","addLike","p","likesCount","MyPosts","page","setPage","postsArray","postData","ava","allPage","Math","ceil","pageVision","i","push","portionArray","slice","startMessage","endMessage","foo","postsElements","map","message","buttonName","pagination","index","isActive","color","AddMessageForm","onSubmit","values","addPost","MyPostsContainer","connect","dispatch","newPostText","addPostAC","idUser","Profile","Preloader","ProfileContainer","match","params","authorizedUserId","history","setUserProfileThunk","getStatus","refreshProfile","updateProfileDataThunk","compose","auth","isAuth","withRouter","withAuthRedirect","setValue","onKeyDown","key","mapStateToPropsForRedirect","Component","getAuthUserData","logout","restProps","to"],"sourceRoot":""}